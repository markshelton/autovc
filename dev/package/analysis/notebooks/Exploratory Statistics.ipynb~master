{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.1 Data Preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logManager - INFO - export_dataframe | Started\n",
      "logManager - INFO - export_dataframe | Passed | 257.31\n"
     ]
    }
   ],
   "source": [
    "#setup path\n",
    "path = 'C:/Users/mark/Documents/GitHub/honours/dev/package/'\n",
    "import sys; sys.path.append(path)\n",
    "\n",
    "#standard imports\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime\n",
    "from scipy import stats\n",
    "from collections import OrderedDict\n",
    "\n",
    "#third party imports\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as md\n",
    "from matplotlib import rcParams\n",
    "import seaborn as sns\n",
    "\n",
    "#local imports\n",
    "import analysis.dataPreparer as dp\n",
    "import analysis.getStages as gs\n",
    "\n",
    "#constants\n",
    "input_path = path+\"analysis/input/master.db\"\n",
    "flatten_config = path+\"analysis/config/master_feature.sql\"\n",
    "raw_flat_file = path+\"analysis/output/temp/raw.csv\"\n",
    "clean_flat_file = path+\"analysis/output/temp/clean.csv\"\n",
    "output_path = path+\"analysis/output/temp/output.db\"\n",
    "#output_path = path+\"analysis/output/autoVC/8/test/2015-04-06/2017-04-03/label_clean.csv\"\n",
    "\n",
    "#setup\n",
    "%matplotlib inline\n",
    "rcParams['figure.figsize'] = 20,6\n",
    "sns.set_style(\"whitegrid\")\n",
    "\n",
    "#dp.flatten_file(input_path, flatten_config, raw_flat_file, \"feature\")\n",
    "#dp.clean_file(raw_flat_file, clean_flat_file)\n",
    "#dp.load_file(output_path, clean_flat_file, \"feature\")\n",
    "#df = pd.read_csv(output_path, encoding=\"latin1\")\n",
    "df = dp.export_dataframe(output_path, \"feature\")\n",
    "df_backup = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#reload data from memory\n",
    "df = df_backup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#df = df.sample(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "stage_features = dict(\n",
    "    Age = 'confidence_context_broader_company_age_number',\n",
    "    Convertible = 'confidence_validation_funding_round_types_list_convertible_note',\n",
    "    NonEquity = 'confidence_validation_funding_round_types_list_non_equity_assistance',\n",
    "    ProductCF = 'confidence_validation_funding_round_types_list_product_crowdfunding',\n",
    "    EquityCF = 'confidence_validation_funding_round_types_list_equity_crowdfunding',\n",
    "    Angel = 'confidence_validation_funding_round_types_list_angel',\n",
    "    Grant = 'confidence_validation_funding_round_types_list_grant',\n",
    "    Seed = \"confidence_validation_funding_round_types_list_seed\",\n",
    "    SeriesA = 'confidence_validation_funding_round_codes_list_a',\n",
    "    SeriesB = 'confidence_validation_funding_round_codes_list_b',\n",
    "    SeriesC = 'confidence_validation_funding_round_codes_list_c',\n",
    "    SeriesD = 'confidence_validation_funding_round_codes_list_d',\n",
    "    SeriesE = 'confidence_validation_funding_round_codes_list_e',\n",
    "    SeriesF = 'confidence_validation_funding_round_codes_list_f',\n",
    "    SeriesG = 'confidence_validation_funding_round_codes_list_g',\n",
    "    SeriesH = 'confidence_validation_funding_round_codes_list_h',\n",
    "    PE = 'confidence_validation_funding_round_types_list_private_equity',\n",
    "    Debt = 'confidence_validation_funding_round_types_list_debt_financing',\n",
    "    Secondary = 'confidence_validation_funding_round_types_list_secondary_market',\n",
    "    Undisclosed = 'confidence_validation_funding_round_types_list_undisclosed',\n",
    "    Closed = \"keys_company_status_closed_bool\",\n",
    "    Acquired = \"keys_company_status_acquired_bool\",\n",
    "    IPO = \"keys_company_status_ipo_bool\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "stage_features = dict(\n",
    "    Age = 'outcome_age_number',\n",
    "    Convertible = 'outcome_funding_round_types_list_convertible_note',\n",
    "    NonEquity = 'outcome_funding_round_types_list_non_equity_assistance',\n",
    "    ProductCF = 'outcome_funding_round_types_list_product_crowdfunding',\n",
    "    EquityCF = 'outcome_funding_round_types_list_equity_crowdfunding',\n",
    "    Angel = 'outcome_funding_round_types_list_angel',\n",
    "    Grant = 'outcome_funding_round_types_list_grant',\n",
    "    Seed = \"outcome_funding_round_types_list_seed\",\n",
    "    SeriesA = 'outcome_funding_round_codes_list_a',\n",
    "    SeriesB = 'outcome_funding_round_codes_list_b',\n",
    "    SeriesC = 'outcome_funding_round_codes_list_c',\n",
    "    SeriesD = 'outcome_funding_round_codes_list_d',\n",
    "    SeriesE = 'outcome_funding_round_codes_list_e',\n",
    "    SeriesF = 'outcome_funding_round_codes_list_f',\n",
    "    SeriesG = 'outcome_funding_round_codes_list_g',\n",
    "    SeriesH = 'outcome_funding_round_codes_list_h',\n",
    "    PE = 'outcome_funding_round_types_list_private_equity',\n",
    "    Debt = 'outcome_funding_round_types_list_debt_financing',\n",
    "    Secondary = 'outcome_funding_round_types_list_secondary_market',\n",
    "    Undisclosed = 'outcome_funding_round_types_list_undisclosed',\n",
    "    Closed = \"outcome_closed_bool\",\n",
    "    Acquired = \"outcome_acquired_bool\",\n",
    "    IPO = \"outcome_ipo_bool\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "MemoryError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mMemoryError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-de1dbcb87ff1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mimportlib\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mimportlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreload\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mgs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mstages\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcreate_stages\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mstage_features\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mdf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconcat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mstages\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Stages done.\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:/Users/mark/Documents/GitHub/honours/dev/package\\analysis\\getStages.py\u001b[0m in \u001b[0;36mcreate_stages\u001b[0;34m(df, **f)\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mx\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdf_new\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mx\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"keys_company_stage_series-d+\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"SeriesD\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"SeriesE\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"SeriesF\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"SeriesG\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"SeriesH\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"PE\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m     \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"keys_company_stage_pre-seed\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Convertible\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"NonEquity\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"ProductCF\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"EquityCF\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Angel\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Grant\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m     \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"keys_company_stage_other\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Debt\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Secondary\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"Undisclosed\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msum\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0mdf_new\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"keys_company_stage\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_new\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mlambda\u001b[0m \u001b[0mrow\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mlabel_stage\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2051\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0mSeries\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mIndex\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2052\u001b[0m             \u001b[1;31m# either boolean or fancy integer index\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2053\u001b[0;31m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_array\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2054\u001b[0m         \u001b[1;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2055\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_getitem_frame\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36m_getitem_array\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2096\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2097\u001b[0m             \u001b[0mindexer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mix\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_convert_to_indexer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2098\u001b[0;31m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2099\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2100\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_getitem_multilevel\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mtake\u001b[0;34m(self, indices, axis, convert, is_copy, **kwargs)\u001b[0m\n\u001b[1;32m   1664\u001b[0m         \"\"\"\n\u001b[1;32m   1665\u001b[0m         \u001b[0mnv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalidate_take\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1666\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1667\u001b[0m         new_data = self._data.take(indices,\n\u001b[1;32m   1668\u001b[0m                                    \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_block_manager_axis\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_consolidate_inplace\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2799\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2800\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2801\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_protect_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2802\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2803\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m_protect_consolidate\u001b[0;34m(self, f)\u001b[0m\n\u001b[1;32m   2788\u001b[0m         \"\"\"\n\u001b[1;32m   2789\u001b[0m         \u001b[0mblocks_before\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2790\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2791\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[0mblocks_before\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2792\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_clear_item_cache\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mf\u001b[0;34m()\u001b[0m\n\u001b[1;32m   2797\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2798\u001b[0m         \u001b[1;32mdef\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2799\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mconsolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2800\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   2801\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_protect_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals.py\u001b[0m in \u001b[0;36mconsolidate\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   3524\u001b[0m         \u001b[0mbm\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__class__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   3525\u001b[0m         \u001b[0mbm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_is_consolidated\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3526\u001b[0;31m         \u001b[0mbm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_consolidate_inplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3527\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mbm\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   3528\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals.py\u001b[0m in \u001b[0;36m_consolidate_inplace\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   3529\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_consolidate_inplace\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   3530\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mis_consolidated\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3531\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_consolidate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mblocks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3532\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_is_consolidated\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   3533\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_known_consolidated\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals.py\u001b[0m in \u001b[0;36m_consolidate\u001b[0;34m(blocks)\u001b[0m\n\u001b[1;32m   4521\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[1;33m(\u001b[0m\u001b[0m_can_consolidate\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mgroup_blocks\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mgrouper\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   4522\u001b[0m         merged_blocks = _merge_blocks(list(group_blocks), dtype=dtype,\n\u001b[0;32m-> 4523\u001b[0;31m                                       _can_consolidate=_can_consolidate)\n\u001b[0m\u001b[1;32m   4524\u001b[0m         \u001b[0mnew_blocks\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_extend_blocks\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmerged_blocks\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_blocks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   4525\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mnew_blocks\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\pandas\\core\\internals.py\u001b[0m in \u001b[0;36m_merge_blocks\u001b[0;34m(blocks, dtype, _can_consolidate)\u001b[0m\n\u001b[1;32m   4544\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   4545\u001b[0m         \u001b[0margsort\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margsort\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnew_mgr_locs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4546\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnew_values\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0margsort\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4547\u001b[0m         \u001b[0mnew_mgr_locs\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnew_mgr_locs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0margsort\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m   4548\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mMemoryError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import analysis.getStages as gs\n",
    "import importlib\n",
    "importlib.reload(gs)\n",
    "stages = gs.create_stages(df, **stage_features)\n",
    "df = pd.concat([stages, df], axis=1)\n",
    "print(\"Stages done.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1.3 Preliminary Screening"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print(df[\"keys_company_stage\"].value_counts())\n",
    "print(df[\"keys_company_stage\"].value_counts(normalize=True))\n",
    "print(df[\"keys_company_stage\"].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Removed Other, Closed, Acquired & IPO groups"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = df.loc[df[\"keys_company_stage\"] != \"Other\"]\n",
    "df = df.loc[df['keys_company_stage_group'] != \"Excluded\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print(df[\"keys_company_stage\"].value_counts())\n",
    "print(df[\"keys_company_stage\"].value_counts(normalize=True))\n",
    "print(df[\"keys_company_stage\"].value_counts().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "order_1 = [\"New\", \"Pre-Seed\", \"Seed\", \"Series A\", \"Series B\", \"Series C\", \"Series D+/PE\"]\n",
    "\n",
    "f, ax = plt.subplots()\n",
    "ax.set_xlim(xmax=30)\n",
    "sns.boxplot(\n",
    "    x=\"confidence_context_broader_company_age_number\", \n",
    "    y=\"keys_company_stage\",\n",
    "    order=order_1,data=df, fliersize=0, ax=ax)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Removed companies older than 15 years old"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df = df.loc[df['confidence_context_broader_company_age_number'] <= 15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "print(df[\"keys_company_stage\"].value_counts())\n",
    "print(df[\"keys_company_stage\"].value_counts(normalize=True))\n",
    "print(df[\"keys_company_stage\"].value_counts().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1.4 Descriptive Statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Table 3. Final test dataset counts grouped by lifecycle stage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "drops = [col for col in list(df) if col.startswith((\"key\",\"from\",\"outcome\",\"index\"))]\n",
    "X = df.drop(drops, axis=1)\n",
    "X = X.select_dtypes(['number'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df[\"keys_missing_features\"] = X.isnull().sum(axis=1)\n",
    "len(list(df))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "groups = [df[\"keys_company_stage\"]]\n",
    "columns = [\"keys_company_stage\", \"confidence_context_broader_company_age_number\", \"confidence_validation_funding_raised_value_total_number\", \"confidence_validation_funding_rounds_number\", \"keys_missing_features\"]\n",
    "colnames = [\"Obs\", \"Age (Years)\", \"Funding Raised (USD, millions)\", \"Funding Rounds (N)\", \"Available Features (N)\"]\n",
    "colfuncs = [{\"N\":len}, \n",
    "    OrderedDict([(\"Median\", np.median),(\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\"))]), \n",
    "    OrderedDict([(\"Median\", lambda x: np.median(x) / 1e6), (\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\") / 1e6)]), \n",
    "    OrderedDict([(\"Median\", np.median),(\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\"))]), \n",
    "    OrderedDict([(\"Median\", lambda x: len(list(df)) - np.median(x)), (\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\") )])]\n",
    "\n",
    "namefunc = OrderedDict(zip(columns, colnames))\n",
    "aggfunc = OrderedDict(zip(columns, colfuncs))\n",
    "\n",
    "order_1 = [\"New\", \"Pre-Seed\", \"Seed\", \"Series A\", \"Series B\", \"Series C\", \"Series D+/PE\"]\n",
    "\n",
    "tab = df[columns].groupby(groups)\n",
    "tab = tab.agg(aggfunc)\n",
    "tab.rename(columns=namefunc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "groups = [df[\"keys_company_stage_group\"]]\n",
    "columns = [\"keys_company_stage\", \"confidence_context_broader_company_age_number\", \"confidence_validation_funding_raised_value_total_number\", \"confidence_validation_funding_rounds_number\", \"keys_missing_features\"]\n",
    "colnames = [\"Obs\", \"Age (Years)\", \"Funding Raised (USD, millions)\", \"Funding Rounds (N)\", \"Available Features (N)\"]\n",
    "colfuncs = [{\"N\":len}, \n",
    "    OrderedDict([(\"Median\", np.median),(\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\"))]), \n",
    "    OrderedDict([(\"Median\", lambda x: np.median(x) / 1e6), (\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\") / 1e6)]), \n",
    "    OrderedDict([(\"Median\", np.median), (\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\"))]),\n",
    "    OrderedDict([(\"Median\", lambda x: len(list(df)) - np.median(x)), (\"IQR\", lambda x: stats.iqr(x,nan_policy=\"omit\") )])]\n",
    "\n",
    "namefunc = OrderedDict(zip(columns, colnames))\n",
    "aggfunc = OrderedDict(zip(columns, colfuncs))\n",
    "\n",
    "tab = df[columns].groupby(groups)\n",
    "tab = tab.agg(aggfunc)\n",
    "tab.rename(columns=namefunc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Table 3. Final test dataset counts grouped by company sector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "industries = [x for x in list(df) if x.startswith(\"confidence_context_industry_category_group_list\")]\n",
    "values = [df[industry].value_counts()[1] for industry in industries]\n",
    "values = sorted(values,reverse=True)\n",
    "print(values)\n",
    "names = [\"Software\", \"Internet Services\", \"Media & Entertainment\", \"Commerce\", \"Mobile\", \"Sales & Marketing\", \"Information Technology\", \"Health Care\", \"Hardware\", \"Financial Services\"]\n",
    "sns.barplot(x = values, y = names, order = names)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.2 Pre-Processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2.1 Imputation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(!) Figure 3. Number of missing features per observation (histogram)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "g = sns.distplot(df[\"keys_missing_features\"], bins=100, kde=False)\n",
    "g.set(xlim = (0,None))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(!) Figure 3. Number of missing observations per feature (histogram)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "missing_by_col =  X.isnull().sum(axis=0)\n",
    "g = sns.distplot(missing_by_col, bins=100, kde=False)\n",
    "g.set(xlim = (0,None))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Figure 3. Mean, median and mode of features (grouped bar plot)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "means_by_col = X.mean(axis=0)#.dropna()\n",
    "means_by_col.plot(kind=\"kde\", label=\"Mean\")\n",
    "\n",
    "medians_by_col = X.median(axis=0)#.dropna()\n",
    "medians_by_col.plot(kind=\"kde\", label=\"Median\")\n",
    "\n",
    "modes_by_col = X.mode(axis=0).T[0]\n",
    "modes_by_col.plot(kind=\"kde\",label=\"Mode\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Figure 3. ROC Curve for different imputations - mean, median, mode (line plot)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2.2 Transformation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--> Apply Imputation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import Imputer\n",
    "\n",
    "X = X.dropna(axis=1, how = \"all\")\n",
    "imp = Imputer(strategy=\"median\")\n",
    "X_imp = imp.fit_transform(X)\n",
    "X_imp = pd.DataFrame(X_imp, index=X.index, columns=list(X))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--> Shift to positive numbers only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x26657c12f60>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n0nNz8nH9K36OWnb8+p78+rPPyqe/cls+/o+35NUvvqDaJQENTCgEAEBDm5yazbU3bM8/fPtnufvB\n4STJqSf057JfPj3PvOjk9HS1H/M5WloKecKZG/OEMzfmVS84L1//4X35x+/enX/50fb8y4+257TN\nA7n0qafmGRednP6ejmM+37GamZ3LzXfsyvW3PJQf3PJQHt4zcdDbe7vbs7avM51rWlMoJBOTs9m1\ndyL3PjSS3LL/fhvXdOWCs0szlS48e9MxD4Oemy/mf37mxlz3k4dy4dkb85vPPeeYjlevfuM55+Q7\nNz2Qf/j2z3L+mRvzSxecWO2SgAYlFAIAoOEUi8Xcft/e/MuPtufrP7wvYxMzaWkp5JcvPDG/+sun\n57wzNlSsc6evpyO/dsmZecHTz8i/3vFI/um7d+f7P34wH/6/N+d/ff4nufj8zXneU7bkgrM3pXUV\nZw/tHZnKD299KNffsiM33vZwJqbmkpTmJ118/uace+q6nL1lXc44cU16ux8blBWLxYyMz+Seh4az\n7Z492XbP7tzys935+g/vy9d/eF+S5OTj+nLh2Zty4dmbcv5ZG9P3c45zKDv3TOSD19yQG27bmbNO\nXpP//P88ZVX/f2pJZ3tr/vMrfjFv+rNv5k8+OZR3dLXlieccV+2ygAYkFAIAoCHMzRdz+3178sNb\nduRbN96/uHvY2v7OXP68x+VXLj51Vbc1LxQKiwHJnpHJfOOH2/OV6+/Jt268P9+68f4M9Hbk35x3\nQi4+f3POP3NjulZ4dszs3Hy23bMnN9z2cG7Y9nBuv29visXS2zZv7M3z/80Jecp5x+fxp29I2zJ2\nuSoUChno7cj5Z27M+WduTFJa6nXPQ8O56fadufG2nfnJXbvyxe/8LF/8zs/SUkjOPHltnnjOplxw\n1sZsOWEg6/o7DwrjJqZm85O7Sh1LX/vBfZmemcuTf+H4vOllg0cUKDWiUzcP5K2vfEr+6H99P1de\n/f389q89If/ul083xBxYURULhebn53PllVdm27Zt6ejoyLve9a6ceuqplTodAMBhFYvFjE3OZs/w\nZPaOTGXPyGR2D09l78hk9oxMZc9w6eXI+HTm5oqZnZvP3Px8isWks6M1nR1t6epoTXdnW9b2dWZt\nf+nPuv6urFt4uX5N6d/l3aqonMmp2dx5/77cdu+ebLt3T/719kcyMj6dJOlob80lTzwpzxw8OU96\n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\nY4uvz8/PLxkIJcng4GCGhoYyODhYqbIq7hm/XO0KaAb1fp1ApblG4PBcJ3B4rhNYmmukPiwVblds\n0e5FF12Ub37zm0mSG2+8Meecc06lTgUAAADAEapYp9Dznve8fOc738nll1+eYrGYq666qlKnAgAA\nAOAIVSwUamlpyTvf+c5KHR4AAACAY2DPRwAAAIAmJBQCAAAAaEJCIQAAAIAmJBQCAAAAaEJCIQAA\nAIAmJBQCAAAAaEJCIQAAAIAmJBQCAAAAaEJCIQAAAIAmJBQCAAAAaEKFYrFYrHYRSTI0NFTtEgAA\nAAAazuDg4M+9vWZCIQAAAABWj+VjAAAAAE1IKAQAAADQhIRCAAAAAE1IKAQAAADQhIRCAAAAAE2o\nZkOhO++8M4ODg5mamqp2KVBzxsfH85rXvCYve9nL8spXvjI7duyodklQU0ZGRvK7v/u7efnLX57f\n+q3fyg033FDtkqBmfeUrX8mb3vSmapcBNWN+fj7veMc78lu/9VvZunVr7rnnnmqXBDXrpptuytat\nW6tdBsegJkOh0dHRvO9970tHR0e1S4GadM011+S8887LJz/5yfzar/1arr766mqXBDXlox/9aJ76\n1Kfmr/7qr/Ke97wn73znO6tdEtSkd73rXXn/+9+f+fn5apcCNeOrX/1qpqen8+lPfzpvetOb8t73\nvrfaJUFNuvrqq/O2t71NI0edq7lQqFgs5u1vf3ve+MY3pru7u9rlQE165Stfmde85jVJkgceeCAD\nAwNVrghqyytf+cpcfvnlSZK5ubl0dnZWuSKoTRdddFGuvPLKapcBNWVoaChPf/rTkyRPfOIT8+Mf\n/7jKFUFt2rJlSz74wQ9WuwyOUVs1T/6Zz3wm/+f//J+DbjvxxBNz2WWX5dxzz61SVVBbft51ctVV\nV+WCCy7IK17xitx222356Ec/WqXqoPqWukZ27tyZP/iDP8hb3/rWKlUHteFQ18lll12W6667rkpV\nQW0aHR1NX1/f4uutra2ZnZ1NW1tVnzpBzbn00kuzffv2apfBMSoUi8VitYs40POe97yccMIJSZIb\nb7wxF1xwQT75yU9WuSqoXXfeeWde/epX56tf/Wq1S4Gasm3btrzxjW/Mm9/85jzjGc+odjlQs667\n7rr8zd/8TT7wgQ9UuxSoCe95z3ty4YUX5rLLLkuSXHLJJfnmN79Z5aqgNm3fvj1vfOMbc80111S7\nFI5SzcXdX/nKVxb//exnPzv/+3//7ypWA7Xpwx/+cI4//vi86EUvSm9vb1pbW6tdEtSUO+64I69/\n/evzp3/6pzpPATgiF110Ub7xjW/ksssuy4033phzzjmn2iUBVEzNhULA4f36r/96rrjiinz2s5/N\n3NxcrrrqqmqXBDXl/e9/f6anp/Pud787SdLX15cPfehDVa4KgHrwvOc9L9/5zndy+eWXp1gs+jkL\naGg1t3wMAAAAgMqrud3HAAAAAKg8oRAAAABAExIKAQAAADQhoRAAAABAExIKAQAAANSIm266KVu3\nbj3s/e6555684AUveMztH/vYx/Inf/InyzqXLekBAAAAasDVV1+dz3/+8+nu7l7yfp/73Ofy8Y9/\nPLt37168bXJyMv/lv/yX3HzzzXn+85+/rPPpFAIAAACoAVu2bMkHP/jBxde3bduWrVu3ZuvWrXnt\na1+bkZGRJMmaNWvyV3/1Vwc9dmpqKi9+8Yvzu7/7u8s+n1AIAAAAoAZceumlaWvbv6jr7W9/e/7r\nf/2v+cQnPpFLLrkkH/nIR5Ikz3rWs9LT03PQY9esWZOnPe1pR3Q+y8cAAAAAatCdd96ZP/zDP0yS\nzMzM5LTTTlvR4wuFAAAAAGrQ6aefnve973058cQTMzQ0lJ07d67o8YVCAAAAADXoyiuvzBVXXJHZ\n2dkUCoW8+93vXtHjF4rFYnFFjwgAAABAzTNoGgAAAKAJCYUAAAAAmpBQCAAAAKAJCYUAAAAAmpBQ\nCAAAAKAJCYUAAAAAmpBQCAAAAKAJCYUAAAAAmtD/D2cFBQkBXEBJAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x26658af6198>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mins_by_col = X_imp.min(axis=0)#.dropna()\n",
    "mins_by_col.plot(kind=\"kde\", label=\"Minimum\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_aus</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_bra</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_can</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_deu</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_esp</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_fra</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_gbr</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_ind</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_isr</th>\n",
       "      <th>confidence_context_broader_offices_headquarters_country_dummy_usa</th>\n",
       "      <th>...</th>\n",
       "      <th>potential_human_advisors_companies_operating_advisor_average_number</th>\n",
       "      <th>potential_human_advisors_companies_operating_advisor_total_number</th>\n",
       "      <th>potential_human_advisors_companies_closed_advisor_average_number</th>\n",
       "      <th>potential_human_advisors_companies_closed_advisor_total_number</th>\n",
       "      <th>confidence_context_broader_last_updated_date_to_confidence_context_broader_founded_date_duration</th>\n",
       "      <th>confidence_validation_funding_first_date_to_confidence_context_broader_founded_date_duration</th>\n",
       "      <th>confidence_validation_funding_last_date_to_confidence_context_broader_founded_date_duration</th>\n",
       "      <th>confidence_validation_funding_first_date_to_confidence_context_broader_last_updated_date_duration</th>\n",
       "      <th>confidence_validation_funding_last_date_to_confidence_context_broader_last_updated_date_duration</th>\n",
       "      <th>confidence_validation_funding_last_date_to_confidence_validation_funding_first_date_duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>325722.000000</td>\n",
       "      <td>3.257220e+05</td>\n",
       "      <td>3.257220e+05</td>\n",
       "      <td>3.257220e+05</td>\n",
       "      <td>3.257220e+05</td>\n",
       "      <td>3.257220e+05</td>\n",
       "      <td>3.257220e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.012864</td>\n",
       "      <td>0.009766</td>\n",
       "      <td>0.021807</td>\n",
       "      <td>0.011952</td>\n",
       "      <td>0.012293</td>\n",
       "      <td>0.009834</td>\n",
       "      <td>0.040139</td>\n",
       "      <td>0.035570</td>\n",
       "      <td>0.007915</td>\n",
       "      <td>0.837862</td>\n",
       "      <td>...</td>\n",
       "      <td>0.427917</td>\n",
       "      <td>0.811133</td>\n",
       "      <td>0.005260</td>\n",
       "      <td>0.010948</td>\n",
       "      <td>3.444990e+08</td>\n",
       "      <td>4.533161e+08</td>\n",
       "      <td>4.258197e+08</td>\n",
       "      <td>1.083560e+08</td>\n",
       "      <td>8.640222e+07</td>\n",
       "      <td>5.037020e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.112687</td>\n",
       "      <td>0.098339</td>\n",
       "      <td>0.146053</td>\n",
       "      <td>0.108670</td>\n",
       "      <td>0.110189</td>\n",
       "      <td>0.098676</td>\n",
       "      <td>0.196284</td>\n",
       "      <td>0.185216</td>\n",
       "      <td>0.088612</td>\n",
       "      <td>0.368578</td>\n",
       "      <td>...</td>\n",
       "      <td>1.824389</td>\n",
       "      <td>4.136556</td>\n",
       "      <td>0.073903</td>\n",
       "      <td>0.139790</td>\n",
       "      <td>6.891021e+07</td>\n",
       "      <td>2.927875e+07</td>\n",
       "      <td>3.581549e+07</td>\n",
       "      <td>4.862788e+07</td>\n",
       "      <td>4.684211e+07</td>\n",
       "      <td>2.481279e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.475172e+08</td>\n",
       "      <td>4.567104e+08</td>\n",
       "      <td>4.295808e+08</td>\n",
       "      <td>1.026669e+08</td>\n",
       "      <td>8.032945e+07</td>\n",
       "      <td>5.085504e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.498148e+08</td>\n",
       "      <td>4.567104e+08</td>\n",
       "      <td>4.295808e+08</td>\n",
       "      <td>1.026669e+08</td>\n",
       "      <td>8.032945e+07</td>\n",
       "      <td>5.085504e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.591362e+08</td>\n",
       "      <td>4.567104e+08</td>\n",
       "      <td>4.295808e+08</td>\n",
       "      <td>1.026669e+08</td>\n",
       "      <td>8.032945e+07</td>\n",
       "      <td>5.085504e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>294.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5.346087e+08</td>\n",
       "      <td>9.784800e+08</td>\n",
       "      <td>9.790848e+08</td>\n",
       "      <td>1.063438e+09</td>\n",
       "      <td>1.069087e+09</td>\n",
       "      <td>5.085504e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 462 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       confidence_context_broader_offices_headquarters_country_dummy_aus  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.012864                   \n",
       "std                                             0.112687                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_bra  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.009766                   \n",
       "std                                             0.098339                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_can  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.021807                   \n",
       "std                                             0.146053                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_deu  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.011952                   \n",
       "std                                             0.108670                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_esp  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.012293                   \n",
       "std                                             0.110189                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_fra  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.009834                   \n",
       "std                                             0.098676                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_gbr  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.040139                   \n",
       "std                                             0.196284                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_ind  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.035570                   \n",
       "std                                             0.185216                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_isr  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.007915                   \n",
       "std                                             0.088612                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "       confidence_context_broader_offices_headquarters_country_dummy_usa  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.837862                   \n",
       "std                                             0.368578                   \n",
       "min                                             0.000000                   \n",
       "25%                                             1.000000                   \n",
       "50%                                             1.000000                   \n",
       "75%                                             1.000000                   \n",
       "max                                             1.000000                   \n",
       "\n",
       "                                                   ...                                               \\\n",
       "count                                              ...                                                \n",
       "mean                                               ...                                                \n",
       "std                                                ...                                                \n",
       "min                                                ...                                                \n",
       "25%                                                ...                                                \n",
       "50%                                                ...                                                \n",
       "75%                                                ...                                                \n",
       "max                                                ...                                                \n",
       "\n",
       "       potential_human_advisors_companies_operating_advisor_average_number  \\\n",
       "count                                      325722.000000                     \n",
       "mean                                            0.427917                     \n",
       "std                                             1.824389                     \n",
       "min                                             0.000000                     \n",
       "25%                                             0.000000                     \n",
       "50%                                             0.000000                     \n",
       "75%                                             0.000000                     \n",
       "max                                            49.000000                     \n",
       "\n",
       "       potential_human_advisors_companies_operating_advisor_total_number  \\\n",
       "count                                      325722.000000                   \n",
       "mean                                            0.811133                   \n",
       "std                                             4.136556                   \n",
       "min                                             0.000000                   \n",
       "25%                                             0.000000                   \n",
       "50%                                             0.000000                   \n",
       "75%                                             0.000000                   \n",
       "max                                           294.000000                   \n",
       "\n",
       "       potential_human_advisors_companies_closed_advisor_average_number  \\\n",
       "count                                      325722.000000                  \n",
       "mean                                            0.005260                  \n",
       "std                                             0.073903                  \n",
       "min                                             0.000000                  \n",
       "25%                                             0.000000                  \n",
       "50%                                             0.000000                  \n",
       "75%                                             0.000000                  \n",
       "max                                             4.000000                  \n",
       "\n",
       "       potential_human_advisors_companies_closed_advisor_total_number  \\\n",
       "count                                      325722.000000                \n",
       "mean                                            0.010948                \n",
       "std                                             0.139790                \n",
       "min                                             0.000000                \n",
       "25%                                             0.000000                \n",
       "50%                                             0.000000                \n",
       "75%                                             0.000000                \n",
       "max                                             7.000000                \n",
       "\n",
       "       confidence_context_broader_last_updated_date_to_confidence_context_broader_founded_date_duration  \\\n",
       "count                                       3.257220e+05                                                  \n",
       "mean                                        3.444990e+08                                                  \n",
       "std                                         6.891021e+07                                                  \n",
       "min                                         0.000000e+00                                                  \n",
       "25%                                         3.475172e+08                                                  \n",
       "50%                                         3.498148e+08                                                  \n",
       "75%                                         3.591362e+08                                                  \n",
       "max                                         5.346087e+08                                                  \n",
       "\n",
       "       confidence_validation_funding_first_date_to_confidence_context_broader_founded_date_duration  \\\n",
       "count                                       3.257220e+05                                              \n",
       "mean                                        4.533161e+08                                              \n",
       "std                                         2.927875e+07                                              \n",
       "min                                         0.000000e+00                                              \n",
       "25%                                         4.567104e+08                                              \n",
       "50%                                         4.567104e+08                                              \n",
       "75%                                         4.567104e+08                                              \n",
       "max                                         9.784800e+08                                              \n",
       "\n",
       "       confidence_validation_funding_last_date_to_confidence_context_broader_founded_date_duration  \\\n",
       "count                                       3.257220e+05                                             \n",
       "mean                                        4.258197e+08                                             \n",
       "std                                         3.581549e+07                                             \n",
       "min                                         0.000000e+00                                             \n",
       "25%                                         4.295808e+08                                             \n",
       "50%                                         4.295808e+08                                             \n",
       "75%                                         4.295808e+08                                             \n",
       "max                                         9.790848e+08                                             \n",
       "\n",
       "       confidence_validation_funding_first_date_to_confidence_context_broader_last_updated_date_duration  \\\n",
       "count                                       3.257220e+05                                                   \n",
       "mean                                        1.083560e+08                                                   \n",
       "std                                         4.862788e+07                                                   \n",
       "min                                         0.000000e+00                                                   \n",
       "25%                                         1.026669e+08                                                   \n",
       "50%                                         1.026669e+08                                                   \n",
       "75%                                         1.026669e+08                                                   \n",
       "max                                         1.063438e+09                                                   \n",
       "\n",
       "       confidence_validation_funding_last_date_to_confidence_context_broader_last_updated_date_duration  \\\n",
       "count                                       3.257220e+05                                                  \n",
       "mean                                        8.640222e+07                                                  \n",
       "std                                         4.684211e+07                                                  \n",
       "min                                         0.000000e+00                                                  \n",
       "25%                                         8.032945e+07                                                  \n",
       "50%                                         8.032945e+07                                                  \n",
       "75%                                         8.032945e+07                                                  \n",
       "max                                         1.069087e+09                                                  \n",
       "\n",
       "       confidence_validation_funding_last_date_to_confidence_validation_funding_first_date_duration  \n",
       "count                                       3.257220e+05                                             \n",
       "mean                                        5.037020e+08                                             \n",
       "std                                         2.481279e+07                                             \n",
       "min                                         0.000000e+00                                             \n",
       "25%                                         5.085504e+08                                             \n",
       "50%                                         5.085504e+08                                             \n",
       "75%                                         5.085504e+08                                             \n",
       "max                                         5.085504e+08                                             \n",
       "\n",
       "[8 rows x 462 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_pos = X_imp.subtract(X_imp.min(axis=0))\n",
    "X_pos.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--> Start transformations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Skewness (Original): 164.79\n",
      "Skewness (BoxCox): 2.02\n",
      "Skewness (Log1P): 2.15\n",
      "Skewness (SQRT): 13.13\n",
      "Skewness (Binary): 2.02\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKEAAAF+CAYAAABalwl6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XlcVPXi//H3AAMq4EJWN0u82pXrFiKgLaI3ytxJNEXE\nyKXUvIZfTQ0lgpTMzKVSr6ndVkpJxcyya5ml5n6jDLXsmuVCLpWmAiYY8/n94YP5iSKLeYSh1/Px\n8PFwDp+Z8z4z85lzeHNmxmaMMQIAAAAAAAAs5FbRAQAAAAAAAFD1UUIBAAAAAADAcpRQAAAAAAAA\nsBwlFAAAAAAAACxHCQUAAAAAAADLUUIBAAAAAADAcpRQFli0aJHuvfdede3aVd26ddO4ceN06NCh\nS44fMmSIvvvuuxJv84UXXtDy5csvO1NsbKxWrVpVruts3bpVTZo00caNG4ssnzRpkmbPnl3m2/nu\nu+/Uo0cP9ejRQ3feeadCQkKcl1977bVyZbocycnJuuuuu/Tcc89Zvq7zZWZmKikpSZK0Y8cOjRw5\n8qquH5cvKytLTZs2dT5PIyIi1KdPH2VkZPyh2z169KjGjx+viIgI3XvvverTp48+/vjjK5J5+fLl\nzrxt2rRRu3btnJc///zzK7KOS8nJyVF0dLS6deumDz/80NJ1XWjJkiV66623JJ177V2wYMFVXT8q\nVlZWllq1anXFbzc/P1+DBg0qst8cP368c15FRkaqe/fuGj58uI4dO3bR9aOjo9WjRw917dq1yGvJ\nmDFjrnjWCy1btkx33nmnHnzwQcvXdb7s7Gw98MADzss9evTQqVOnrmoGAEDJSjvGrYjfWTiG/fMd\nw3pUdICqZurUqdq9e7fmz5+vG264QQ6HQytWrFDfvn21ZMkS/eUvf7noOi+99FKpt/t///d/VsQt\nlYeHh+Lj47VixQr5+fld1m387W9/07vvvivp3MHxhx9+qPnz51/JmCV6++23tXbt2mLveyt99913\nOnr0qCTplltu0axZs67q+vHHVKtWzfm8laQPPvhAEyZM0EcffXRZt3f8+HFFR0fr//7v/zRlyhTZ\nbDbt3r1bgwYNUvXq1dW2bds/lDcyMlKRkZGSzv2y3Lhx46v2S+g333yjY8eOafXq1VdlfefLyMhQ\n48aNJUn9+vW76utH1fPll19q4sSJ+v7779W3b98iPxs4cGCRefXMM89o4sSJF72+p6WlSTp3sB8R\nEVHktcRqy5cv1+jRo9WjR4+rtk5JOnnypHbs2OG8fDW3GZXT9u3bNWPGDJ04cULGGP3lL39RfHy8\n8zX7999/1yuvvKL33ntPkuRwONSmTRuNHDlSderUkXRuf7Zx40bnMajD4dDp06cVHR2tIUOGaMGC\nBVq5cqUk6cCBA6pTp458fX0lSbNnz5a/v78zT3R0tH777TedPXtWP/zwgwICAiSdO06dMWOGpffF\nsmXLNGvWLN188816+eWXLV3X+bKzszVixAi98cYbks6Vw6mpqapZs+ZVy4DKp6Rj3Ir4nYVj2D/f\nMSwl1BV05MgRpaWlae3atapVq5Ykyc3NTZGRkdq5c6fmz5/vPCsnMDBQ3377rR599FFNmTJFL7zw\ngm655RYtWLBAS5culbe3t0JDQ7VmzRp98sknRSbkLbfcoqFDh2rjxo366aef9MADD2jgwIE6ffq0\nnnzySe3bt08nT56Ut7e3pk+frkaNGl32Nv31r39VYGCgEhISNG/evGK3+cknn9SPP/4oY4wiIyP1\n0EMPlWsds2fP1vbt2/XTTz/p73//u8aPH6+kpCQdO3ZMP//8s2688UY9//zzuuaaa3TXXXepZ8+e\n2rx5sw4fPqwuXbroscceU25uriZMmKD9+/fLzc1NzZs316RJk3T//ffLGKMhQ4YoOTlZtWrV0qRJ\nk3TixAnZbDYNHjxYkZGR2rp1qyZPnqwaNWro9OnTGjdunObMmaPrrrtOe/bsUfXq1RUXF6fU1FT9\n8MMP6tixoxISEuRwOPT000/rq6++Um5urowxeuqpp1SvXj3NmjVL2dnZmjBhgiIjI5WSkqL3339f\n2dnZmjhxonbv3i2bzaZ27drp0UcflYeHxyUfW1S8EydO6Nprr3Vefvvtt5Wamio3NzfVrVtXTzzx\nhBo0aKBBgwapefPmeuyxx7Rp0yaNHz9ey5YtU1pamoKDg507WUlq0qSJZs+e7Txg/vzzz/Xss8/q\nt99+k91u16hRo9S+fXvNmTNHn332mRYuXKjjx4+rZ8+emj59um677bYy54+NjVWtWrX0/fffq1+/\nfrrllls0bdo05efn6+eff9Ydd9yhp59+WllZWRo4cKD+8Y9/6KuvvtLJkyc1evRode3aVXv37tXj\njz+u/Px8GWPUu3dv3X777UpISNDRo0fVo0cPvf3229qwYYPmzJmjgoIC+fj4aMKECQoMDLxorjdo\n0EAHDhzQwYMH9dNPPykwMFBt27bV8uXLlZWVpXHjxql79+765Zdfin1N+OKLL/TJJ59o48aNqlat\nmo4fP65ff/1VSUlJ2rNnzyXn+nPPPaf69etrz549ys/PV1JSUrnuS7iGkl5r161bp+nTp8vNzU1N\nmzbVpk2btHDhQt10001KTU3VqFGjyvSL4u23365p06aVK9eF+5ulS5fq2WefvWg/EhISovHjx8vH\nx0fffvutjhw5okaNGmnmzJny9vbWrFmztHr1atntdtWpU0dTpkzRv//9b+3YsUNZWVn69ddfdd99\n913yPmjRooXuvvtu7d69W9OnT1dMTIwGDhyotWvXKicnR+PGjdOqVav0v//9T9ddd53mzZunGjVq\naOnSpXr77bd19uxZnTx5UkOGDFFMTIwmTJigM2fOqEePHlq2bJmaNWumzZs3y8/PT//617+0cuVK\nubu7q2HDhnriiSd07bXXKjY2VkFBQfriiy90+PBhhYSEaOrUqXJz40R9V5efn69hw4bplVdeUfPm\nzSWdKyaHDBmiNWvWyN3dXePGjZPD4dCbb76pWrVq6ezZs3rttdcUHR2t9PR0+fj4SLq4/D106JC6\ndu2qu+66S0OHDtXQoUMlndvP9e/fX507dy42E+Uw5TCKd/4x7tatW52/s5S0D7rUvmDZsmVaunSp\nfvvtN/n4+MjDw0OdO3d2/lHnxRdf1K+//qqEhIQy5+MYtgoewxpcMatWrTK9evUq9mdr1qwxERER\nxhhjwsPDzZw5c5w/Cw8PN5mZmWb9+vWmU6dO5uTJk8bhcJgJEyaY8PBwY4wx8fHx5t///rcxxpiA\ngACTmppqjDFmx44dpkWLFubMmTPmP//5j0lJSXHe7hNPPGEmTZpkjDHm/vvvN//5z3/KtT1btmwx\n3bp1M7m5uaZjx47OdU6cONHMmjXLGGNM//79zSuvvGKMMebUqVMmIiLCvP/++5e8zfT0dDN06NAi\ny2bNmmU6depkzp49a4wx5rXXXjPz5883xhjjcDjMQw89ZF5++WXnffXMM88YY4w5cuSIueWWW8yB\nAwfMO++8YwYPHmyMMeb33383jz/+uNm3b5/z/jp27Jg5e/asufvuu82HH37ovH67du3MF198YbZs\n2WKaNGlisrKynNvetGlTs2vXLmOMMQ8++KDp27evycvLM8eOHTPNmzc3R44cMV988YWJi4szBQUF\nxhhj5s+fb4YNG3bRthbel8YY89hjj5mUlBTjcDhMXl6eGTx4sHN7L/XY4uo6ePCgadKkibn33nvN\nvffea+68807TvHlzs3btWmOMMZs2bTIdOnQwx44dM8ace6y7dOliHA6HOXr0qLnjjjvM6tWrTfv2\n7c22bduMMcYMGzbMvPnmm5dc5/Hjx83tt99utm/fbowx5n//+59p06aNOXDggPn9999N//79zfz5\n882AAQPMiy++WGL+818vCt1///1mwoQJzsujR482W7ZsMcYYk5OTY2699VazY8cOc/DgQRMQEGA+\n+eQTY8y517U777zTGGPMhAkTnM/Vn376yYwaNcoUFBQUeX5/99135o477jAHDhxw3ldt27Y12dnZ\nF831WbNmmfDwcHPq1Cnz22+/mdatW5spU6YYY4xZvXq16dixozGm5NeE87d11qxZZuLEiaXO9aZN\nm5qvv/7aGGPMyy+/bPr371/i/YnK6+DBgyYoKKjYn13qtfb48eOmTZs25ptvvjHGGLNs2TITEBBg\nDh48WOT6F+43L5xXv/32mxk1apRzP1vWfBfub0raj8THxzv3Pfn5+SYyMtIsXbrUHDp0yAQHB5u8\nvDxjzLnn8erVqy/KXdr+5p133nHmCggIMK+//rozQ6tWrcyRI0dMQUGB6dmzp1mxYoXJyckxUVFR\n5vjx48YYY7788kvn9l24rYX73qVLl5q+ffua3NxcY8y5eVq4v77//vvNyJEjTUFBgcnOzjZhYWFm\n8+bNl7w/4TpOnDhhmjZt6twHGnPu9fvjjz82eXl55quvvjJt27Y1p0+fvui6Dz/8sFmwYIExpvj9\nWUZGhmnZsqU5cuRIkeVlPda91LyMiIgwffv2NRERESYvL8+kpKSY3r17my5dupjOnTubzz//3Jkp\nJSXF3H///aZDhw5m6NChJicnxxhjzAsvvGC6d+9uevbsaQYPHmyOHj1qJk+ebIKCgkx4eLh59dVX\nzalTp8yYMWNMt27dTPfu3c3UqVOd+8XmzZubkSNHmo4dO5rMzEzTokULM336dNO9e3dz5513mpUr\nV5q4uDjTqVMnExsb65xXS5YsMb179zY9evQwd955p3nrrbec90nh8czvv//unJfGGDNnzhzTpUsX\n0717dxMXF2d++ukn53WmT59uYmJiTHh4uBk7dqzz9Qmur7Rj3POP6S61DyppX5Cenm5at25tsrOz\njTHnjufuu+8+Y4wxBQUFJjw83Ozdu/eS+TiG/XMcw3Im1BX2+++/F7s8Pz9fNpvNeTk0NPSiMevW\nrVPnzp2dp8j2799fW7ZsKfb27r77bklS8+bNlZ+fr9OnT6tz586qX7++UlNTtX//fm3btu2KfFZG\njRo1NGPGDA0YMEBt2rRxLj99+rS++OILvfLKK5IkX19f9erVS+vXr1e3bt3KtY6goCB5eJx7Og4Y\nMECff/65Xn31Ve3bt0979uxRy5YtnWMLt/3666/XNddco5MnTyokJETPPfecYmNjdccdd2jAgAFq\n0KBBkXXs27dPeXl56tixo/P6HTt21GeffaZbb71VN9xwg2688Ubn+JtuuknNmjWTJPn7+8vX11ee\nnp7y8/OTt7e3Tp48qVatWqlWrVpKS0vTwYMHtXXrVnl7e5e4revXr9eiRYtks9nk6emp6Ohovf76\n686/5BX32Hp5eZXr/sQfd+Gpyl988YWGDBmi5cuX67PPPlPXrl2dbw/o1auXJk+erKysLNWvX18p\nKSn65z//qbi4OLVu3VqSZLPZZIy55PoyMzPl7+/vfK43btxYwcHB2rZtm+677z5NmzZN9957r1q0\naKFhw4Zd1jad/7rzzDPPaP369Zo3b56+//57nTlzRqdPn1bt2rVlt9v1j3/8Q5LUrFkznThxQpJ0\nzz33KD4+XpmZmbr99tuVmJh40RkLW7Zs0W233ab69etLOnemiJ+fn3bu3Cmp6FyXpDvuuMN5Jth1\n112ndu3aSTo35wrXW9prwoVKm+v16tVT06ZNndv3zjvvXNb9icrtUq+1DRs21M0336wmTZpIknr2\n7KmnnnqqTLf52muvacWKFZKkgoICtW7dWo8++mi5s52/vyltP9KuXTt5enpKkgICAnTy5Eldf/31\natKkiXr27Kn27durffv2uv3228t8HxTuby48FunUqZOkc/MvICBA119/vaRz+8PCM6znzZundevW\nad++fdq9e7dOnz5d4rauX79evXr1Uo0aNSRJDzzwgObNm6f8/HxJUnh4uNzc3OTj46MGDRro5MmT\n5b4/UfnUqlVL48aN00MPPaS6desqODhYt956q7p16yZPT0998cUXatGihapXr37Rddu2bVvk80gL\n511ubq6ys7MVEhKiefPmOZ+fV8qePXv08ccf68Ybb9SXX36pn376SW+//bbc3Ny0YMECvfTSSwoJ\nCZEk7dy5U2+88YZsNpuioqK0atUq3XHHHXr99de1efNmeXp66pVXXlFmZqYSEhL0zTffOM/Sio+P\nV+3atfXee+/p7NmzGj58uF555RUNHTpUZ8+eVXh4uF544QVJ535/uPbaa/Xee+9pwYIFSkxM1H/+\n8x9de+216t27t9asWaO77rpLS5Ys0YIFC1SnTh1t375dgwYNUkxMjKZMmVLsWV/p6en67LPPtHTp\nUtWoUUOzZ8/W+PHjnWeAHjhwQKmpqTp9+rS6dOmibdu2uebZFihWSce4FypuH1TavuDvf/+780zG\n8PBwPfXUU9q9e7eOHj2qm2666bLepcMxbNU6huV85ysoKChI+/fv188//3zRz7Zu3VqkECo8GDuf\nh4dHkV9S3d3dL7muwlKisNgyxmjhwoV6/PHHVa1aNUVERKh79+4l/tJbeOph4b/Czy8qTosWLTR8\n+HCNGTNGeXl5ks69L//C23c4HJcs4kpy/v0xbdo0vfDCC6pTp4769u2rtm3bFlnP+YVM4S/29evX\n1+rVqzV06FDl5ORc9IGyhdkuZIxx5r3wMSl8wS10/otOobVr1zoLgbvvvrtM7+e9MMeF91lxjy0q\nXnBwsBo2bKgdO3YU+5ic/1z67rvvVLdu3SKnwAcFBWn79u0XXS8tLU2vvvpqqc/PQ4cOycvLS/v3\n77/sD/s9/znev39/rVu3To0aNdKIESN0/fXXO7fLbrc7d8znl+fh4eH68MMP1aVLF33zzTeKiIjQ\ngQMHLspc0nZczjwr7TXhQqXdl9WqVXMuL60chOu61Gutu7v7RY95Wd/+NXDgQL377rt699139f77\n7ys5ObnUPzwU5/x5UNp+pLjnq5ubm958801NmTJFtWvX1tNPP11skVba/ubC+Wi324v9f6EjR44o\nMjJSP/74o0JCQjRq1KhSt7W04wTmY9U1aNAgbdy4UYmJibr22mv10ksvKTIyUtnZ2aVe9/znbuG8\nW7FihYKCguTm5ub8A8+VdGE5PGrUKKWlpWnq1KlatWqVcnNznWMLfzG32+3FlsNTp05V06ZN1aFD\nh4vWs379et1///1FyuH169c7f16WctjNza3Ycvj555/XvHnzLqsc3rJlC+Xwn9T5x7gXKu41urR9\nwfn7Fnd3d0VHR2vp0qVKT09XdHT0ZWXkGLZqHcNSQl1B119/vWJjY/Xoo48WKXTS09P10UcfaciQ\nISVe/x//+Ic++ugj58556dKl5Vr/hg0b1LNnT/Xp00cNGzbUJ598ooKCghLzFh5Mv/vuu6X+RenB\nBx9U3bp1nX8F9vHxUcuWLZ2f6p+dna3ly5frjjvuKFfu4rZjwIABioyM1DXXXKNNmzaVuB2StHDh\nQk2YMEFhYWEaN26cwsLCtGfPniJjGjZsKLvd7vxg6aNHj+rDDz/8Q3k3btyo8PBwxcTE6JZbbtHH\nH3/szOru7l5sIRcWFqa33npLxhjl5+dr8eLFf/g+g/V++OEH7du3T02bNlVYWJg++OADHT9+XNK5\nOV67dm01aNBAmZmZeuONN5Senq5Tp07p9ddflyT17dtX27Zt04oVK5w7jJ07d2rWrFkKCAhQy5Yt\n9cMPPygzM1PSub/I/ve//1WbNm106tQpjRs3TlOnTlX37t31+OOP/6FtOXnypHbu3KmxY8eqY8eO\nOnr0qA4cOFDsju98Y8aM0QcffKBu3bopOTlZPj4+Onz4cJExt912mzZu3KiDBw9KkvPz20r6q09p\nSnpNKG6eWTHX4Xou9VobHBzs/MutJH344Yc6depUkYPVq6mk/cil7N69W927d9fNN9+sYcOGaeDA\ngfr2228vGnel9zc7d+6Un5+f/vnPf6pdu3b69NNPJZ07K8zDw0MFBQUXHRCHhYVp2bJlzl+KU1NT\n1bp164sO3lG1ZGRk6N///rd8fHwUHh6uxx57TCtXrpSbm5s2btyo4OBg7dixQ7/99pukc2f8/Prr\nr5LOnY0QFBR00W3WqFFDzz77rL788ku9+uqrVzwz5TDl8J/V+ce4ZVHSvqA4hd8GvWvXLt1zzz1/\nKCvHsFUDb8e7wsaMGaMlS5Zo+PDhys/PV35+vm655RalpaUVeatXcW6//XZFRUWpb9++qlatmho3\nblzsacqXMnjwYCUlJWnZsmVyd3dX8+bN9b///e+PbpKTzWbT1KlTde+99zqXTZ8+XZMmTdKyZcuU\nn5+viIgI9erV6w+tZ8SIEXr22Wc1d+5cubu7Kzg4+KKm+kKRkZHatm2bunbtqurVq6tevXpFvipa\nOrfjnjt3rp566inNnj1bBQUFGjFihG677TZt3br1srJGR0dr7NixioiIkLu7u0JDQ/XRRx/J4XCo\nVatWev755zVixIgiWRITE/XUU08pIiJCZ8+eVbt27fTwww9f1vphncIP2C3kcDg0adIkNWzYUA0b\n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\nmaJRo0Zp4cKFMsZozZo1+vnnn5Wamqq0tDS9/PLLmjlzpvLz87Vo0SIFBARo4cKFioyM1Ny5cyVJ\nycnJmjFjhhYtWqSvvvpKX3/9tXbt2qVt27ZpyZIlmjlzpiZOnGjVJgEAAAAAAOAyWVZC+fv7a/bs\n2c7Lu3btUps2bSRJ7du316ZNm5SZmalWrVrJ09NTvr6+8vf31+7du5WRkaF27do5x27evFk5OTnK\nz8+Xv7+/bDabwsLCtGnTJmVkZCgsLEw2m0316tVTQUGB88wpAAAAAAAAVA4eVt1wp06dlJWV5bxs\njJHNZpMkeXt7Kzs7Wzk5OfL19XWO8fb2Vk5OTpHl54/18fEpMvbgwYPy8vJS7dq1iyzPzs6Wn59f\nqRkzMjKuyJiKQK7yIZdrceW5eSFXySm5TlZXySm5VtaycNW5WRkzSeQqr8qaqzJwhblZ0euvDBkq\nev1kuPpcYW4Wqiw5JLJcSlXJYlkJdSE3t/9/0lVubq5q1qwpHx8f5ebmFlnu6+tbZHlJY2vWrCm7\n3V7sbZRFSEhIyQMWZpU+pgJkZGSQqxzIVfy6KzNXnZsXqqzPveK4SlZXySldXlaXnpsLs0ofUwEq\n63OGXOVT0bmYm39MRT9+lSFDRa+/qmZgbl4ZleG5UYgsxXO1LCXNzav27XjNmjXT1q1bJUnr169X\naGioAgMDlZGRoby8PGVnZ2vv3r0KCAhQcHCw1q1b5xwbEhIiHx8f2e12HThwQMYYbdiwQaGhoQoO\nDtaGDRvkcDh06NAhORyOMp0FBQAAAAAAgKvnqp0JFR8fryeeeEIzZ85Uo0aN1KlTJ7m7uys2NlYx\nMTEyxmj06NHy8vJSv379FB8fr379+slut2vGjBmSpIkTJ2rs2LEqKChQWFiYWrZsKUkKDQ1V3759\n5XA4lJSUdLU2CQAAAAAAAGVkaQl10003afHi/9fevQdHVR5uHH82VzAJYEb6hwOBQEmnlKGQMHQc\nQoCxSlu5jEFCgyadQsulBQoCDSCBMAFKaulModCRVsUJCqTASKVjbZFCSrlMXQ2UIDqlGit2MOUy\nZpeQBPb9/eFkf0RDsol5zzkL389f7DlnOU/ec97DnofdTYUkKT09XTt27PjcNnl5ecrLy2uxrHv3\n7tq0adPnth02bFj477vV/PnzNX/+/C5KDQAAAAAAgK7m2MfxAAAAAAAAcPeihAIAAAAAAIB1lFAA\n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\n2Wcdz3Gr1uaUF8YqGtmYm5Een48//thMmDDBNDQ0mE8++ST85+eee85s2rTJGGPMgQMHTGlpqTHG\nmEmTJpmamhoTCoXMD37wA1NdXd1mjsbGRvOjH/3IPPzww+Zf//qX4xlOnDhhZs+ebW7evGkCgYDZ\ntGmToxn+8pe/mAULFhhjjDl69KiZN2+eY/uP5FrWFfs9c+aMKSgoMKFQyFy4cMHk5ua2eU54mZde\n03bmftONLM127txp8vLyzNNPP20tR3tZQqGQmTRpknn//feNMZ/+W3n+/HlXshhjzKhRo8yVK1dM\nQ0ND+NyxxdZ9w13530h+v1+jR4+WJA0bNkxnzpwJrzt//rzS0tLUs2dPJSQkKCsrS//4xz/afI4T\nuRISErRr1y51795dknTjxg0lJibq3Llzqq+v14wZM1RYWKiqqqouz9VeNkmqrq7Wtm3blJ+fr2ee\neSai5ziRS5KMMSotLVVJSYliY2MdG7O0tDRt3rz5c8vdPMeiSWfmqVs6Mz/c0tHz0k23yyp5Z0y/\n9a1v6Sc/+YmkT681sbGx4XVeHFMbvHrtcupaH6nPns/V1dUaOXKkJCknJ0fHjh1zPdOZM2d0+PBh\nPf7441qxYoUCgYDjmVqbU14Yq2hkY25GenxOnz6t4cOHKyEhQSkpKUpLS9O5c+daZMrJydHx48cV\nCATU2NiotLQ0+Xw+ZWdnt3uMy8rK9N3vfldf+tKXJLU+n2xmOHr0qDIyMvTjH/9Yc+bM0dixYx3N\nkJ6erps3byoUCikQCCguLs6x/UdyLeuK/fr9fmVnZ8vn8+n+++/XzZs3dfny5TbPC6/y0mvaztxv\nupFFkt58802dOnVK06ZNs5YhkizvvfeeevXqpe3bt+uJJ57Q1atXrb77vr1x+cpXvqK6ujo1NjbK\nGCOfz2cti637hruyhAoEAuG350tSbGysbty4EV6XkpISXpeUlKRAINDmc5zIFRMTo/vuu0+SVF5e\nrmvXrmnUqFHq1q2bZs6cqWeffVZr1qzRkiVLujxXe9kk6ZFHHlFJSYleeOEF+f1+/fWvf3V9zJod\nOnRIgwYNCl8snBqz8ePHKy7u8594dfMciyadmadu6cz8cEtHz0s33S6r5J0xTUpKUnJysgKBgBYs\nWKCFCxeG13lxTG3w6rXLqWt9pD57Pt/6wjEpKUl1dXWuZxo6dKh++tOf6sUXX1Tfvn21ZcsWxzO1\nNqe8MFbRyMbcjPT4tPVap3n5rdvemrO9Y7xv3z6lpqaGb9Kk1ueTzQxXrlzRmTNn9Ktf/Sp8fXEy\nwz333KMLFy7o29/+toqLi1VQUODY/iO5lnXFfjt6TLzMS69pO3O/6UaWjz/+WFu2bNGqVaus7T/S\nLFeuXNFbb72lJ554Qs8//7xOnDih48ePu5JFkgYNGqQpU6bokUce0dixY9WjRw9rWWzdN9yVJVRy\ncrKCwWD4cSgUCg/uZ9cFg0GlpKS0+RwncjU/Lisr09///ndt3rxZPp9P6enpmjRpUvjPvXr1Um1t\nbZfmai+bMUbf+973lJqaqoSEBI0ZM0Znz571xJhJn35u9tbPqDo1ZpFmdvIciyadmadu6cz88Bqv\njWlbvDam//3vf1VYWKjJkydr4sSJ4eXRNKZfhFevXW5f69tz63dsBINBqy8iI/XQQw9pyJAh4T+7\nNa8+O6e8OFbRwNbcjOT4RPJap61t2zrGe/fu1bFjx1RQUKC3335bRUVFLd4h40SGXr16KTs7WwkJ\nCRowYIASExNbFCS2M2zfvl3Z2dl67bXXtH//fi1btkxNTU2OjkEzW8f/Tvo31EuvaTtzv+lGlj/9\n6U+6cuWKZs2apW3btunAgQPat2+fK1l69eqlfv36aeDAgYqPj9fo0aOtvuu7rSznzp3T4cOH9frr\nr+vQoUO6fPmyXn31VWtZIs3Y0fP2riyhMjMzVVlZKUmqqqpSRkZGeN3AgQNVU1Ojq1evqrGxUW+8\n8YaGDx/e5nOcyCVJq1atUkNDg7Zu3Rp+m+SePXu0YcMGSdLFixcVCATUu3dvR7MFAgFNmDBBwWBQ\nxhidPHlSQ4YM8cSYSZ9+vCAzMzP82Kkxux03z7Fo0pl56pbOzA+v8dqYtsVLY/q///1PM2bM0NKl\nS/XYY4+1WBdNY/pFePXa5fa1vj2DBw/WyZMnJUmVlZUaMWKEy4mkmTNn6vTp05Kk48eP62tf+5rj\nGVqbU14cq2hgY25GenyGDh0qv9+vhoYG1dXV6fz588rIyFBmZqaOHDkS3jYrK0vJycmKj4/XBx98\nIGOMjh492uYxfvHFF7Vjxw6Vl5frq1/9qsrKypSTk+NohqysLP3tb3+TMUYXL15UfX29HnjgAccy\n9OjRI3zD17NnT924ccPx49DM1n4zMzN19OhRhUIhffTRRwqFQuFfRhJtvPSatjP3m25kKSws1L59\n+1ReXq5Zs2ZpwoQJys3NdSVL3759FQwGVVNTI0l64403NGjQIFeypKSkqFu3bkpMTFRsbKxSU1P1\nySefWMtyO1/0vPUZY4zFfJ7U/I3z7777rowxWr9+vc6ePatr165p2rRp4W96N8ZoypQpevzxx1t9\nzsCBAx3LNWTIEE2ZMkUjRowIN9KFhYUaM2aMli9fro8++kg+n09LlixpUbg4kW3atGl6+eWXVV5e\nroSEBD3wwANasGCB62M2bdo0Xb58Wd///ve1f//+8HMaGxsdGTNJ+vDDD/Xkk0+qoqJCr7zyiuvn\nWDTpzDz1atbW5oebOnJeuu12Wb0ypmvXrtWrr77a4rsBpk6dqvr6es+OaVfz6rXLyWt9pG49n997\n7z0VFxerqalJAwYM0Nq1a1t8p5gbmaqrq1VaWqr4+Hjdd999Ki0tbfGRACe0NqeeeuoprV271vWx\nijY25mZHjk9FRYV2794tY4xmz56t8ePHq76+XkVFRaqtrVV8fLw2btyo3r17q6qqSuvXr9fNmzeV\nnZ2tRYsWRZSnoKAg/Nu7WptPNjP8/Oc/18mTJ2WM0aJFi9SnTx/HMgSDQa1YsUK1tbVqampSYWGh\nhgwZ4tj+I7mWdcV+N2/erMrKSoVCIS1fvjxqC2gvvabtzP3mQw895HiWW78Hat++ffr3v//tyG/H\nu12W48ePa+PGjTLGaPjw4Vq5cqVrWXbu3Km9e/cqPj5eaWlpKi0tVUJCgrU8Nu4b7soSCgAAAAAA\nAM66Kz+OBwAAAAAAAGdRQgEAAAAAAMA6SigAAAAAAABYRwkFAAAAAAAA6yihgChw6tQpFRQUtLtd\nTU2NJk6cGH58+fJlzZgxQ9OnT9fChQtVX19vMyYAAAAAALdFCQV43G9/+1utXLlSDQ0NbW738ssv\na9GiRbp8+XJ42datWzVhwgS99NJLGjx4sHbv3m07LgAAAAAAraKEAjwuLS1NmzdvDj9+5513VFBQ\noIKCAs2fP191dXWSpJ49e2rHjh0tnuv3+zV69GhJUk5Ojo4dO+ZccAAAAAAAbkEJBXjc+PHjFRcX\nF35cXFys1atXq7y8XDk5Ofrd734nSRo3bpzuueeeFs8NBAJKSUmRJCUlJYULKwAAAAAAnBbX/iYA\nvOT8+fNas2aNJKmpqUn9+/e/7bbJyckKBoPq1q2bgsGgevTo4VBKAAAAAABaooQCokx6errKysp0\n//33y+/3q7a29rbbZmZm6siRI8rNzVVlZaWysrIcTAoAAAAAwP+jhAKiTElJiYqKinTjxg35fD6t\nW7futtvOnTtXRUVFqqio0L333quNGzc6mBQAAAAAgP/nM8YYt0MAAAAAAADgzsYXkwMAAAAAAMA6\nSigAAAAAAABYRwkFAAAAAAAA6yihAAAAAAAAYB0lFAAAAAAAAKyjhAIAAAAAAIB1lFAAAAAAAACw\njhIKAAAAAAAA1v0fq7dIVgpNko4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2664e1606a0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "funding = X_pos[\"confidence_validation_funding_raised_value_total_number\"]\n",
    "\n",
    "figure = plt.figure()\n",
    "\n",
    "ax0 = plt.subplot(151)\n",
    "funding.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Original - No Transformation\") \n",
    "print(\"Skewness (Original): {0:.2f}\".format(stats.skew(funding))) \n",
    "\n",
    "figure.add_subplot(152, sharey=ax0)\n",
    "boxcox = pd.Series(stats.boxcox(funding + 1)[0], index=X_pos.index)\n",
    "boxcox.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"BoxCox Transformation\") \n",
    "print(\"Skewness (BoxCox): {0:.2f}\".format(stats.skew(boxcox))) \n",
    "\n",
    "figure.add_subplot(153, sharey=ax0)\n",
    "log1p = pd.Series(np.log1p(funding), index=X_pos.index)\n",
    "log1p.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Log1P Transformation\") \n",
    "print(\"Skewness (Log1P): {0:.2f}\".format(stats.skew(log1p)))\n",
    "\n",
    "figure.add_subplot(154, sharey=ax0)\n",
    "sqrt = pd.Series(funding**(1/2), index=X_pos.index)\n",
    "sqrt.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"SQRT Transformation\") \n",
    "print(\"Skewness (SQRT): {0:.2f}\".format(stats.skew(sqrt)))\n",
    "\n",
    "from sklearn.preprocessing import binarize\n",
    "\n",
    "figure.add_subplot(155, sharey=ax0)\n",
    "binary = pd.Series(np.where(funding == 0, 0, 1), index=X_pos.index)\n",
    "binary.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Binary Transformation\") \n",
    "print(\"Skewness (Binary): {0:.2f}\".format(stats.skew(binary)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--> Apply transformations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import FunctionTransformer\n",
    "\n",
    "ft = FunctionTransformer(np.log1p)\n",
    "X_tf = ft.fit_transform(X_pos)\n",
    "X_tf = pd.DataFrame(X_tf, index=X_pos.index, columns=list(X_pos))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--> Start scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median: 0.0, IQR: 0.0\n",
      "Median: -0.4053973137078973, IQR: 0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py:986: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  warnings.warn(DEPRECATION_MSG_1D, DeprecationWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py:1008: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  warnings.warn(DEPRECATION_MSG_1D, DeprecationWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py:986: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  warnings.warn(DEPRECATION_MSG_1D, DeprecationWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\preprocessing\\data.py:1037: DeprecationWarning: Passing 1d arrays as data is deprecated in 0.17 and will raise ValueError in 0.19. Reshape your data either using X.reshape(-1, 1) if your data has a single feature or X.reshape(1, -1) if it contains a single sample.\n",
      "  warnings.warn(DEPRECATION_MSG_1D, DeprecationWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median: 0.0, IQR: 0.0\n",
      "Median: 0.0, IQR: 0.0\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA7oAAAFyCAYAAADbIKadAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XtAlGX+///XcNQYULFdyxLT8rBqiEJmCZV2ME0USxFo\nyfWcGa6mqBiCByoPqaUumnx0t9UU8ayra67kIcXFolVTo9T1hOfVMsBkCOb3Rz/nK3EQlJHx7vn4\ni7nmmvt+3zNz3fe85r7mxmS1Wq0CAAAAAMAgnKq6AAAAAAAAKhNBFwAAAABgKARdAAAAAIChEHQB\nAAAAAIZC0AUAAAAAGApBFwAAAABgKARdO1i6dKm6du2qzp0766WXXlJ0dLTOnDlTav8BAwboyJEj\nZS7zww8/1Jo1a265psjISG3atKlCj0lPT1fTpk21a9euIu0TJ07U7Nmzy72cI0eOqFu3burWrZue\neeYZ+fv7227/7W9/q1BNtyI+Pl4dOnTQzJkz7b6uG+3fv19xcXGSpK+//lpDhw69o+uHY9i7d68i\nIyMVHBysLl26qH///jp8+LDt/r59++ry5cuVtr5BgwZp1apVt7WMBQsWaMyYMSXet23bNvXq1Utd\nu3bVSy+9pD//+c86d+7cLa/r+r7p/PnzCgsLu+XlAJWhSZMmCg4OVrdu3RQSEqKOHTvqlVde0ddf\nf33Tx3bo0KFc/crj1KlTioqKKvG+/Px8TZ06VcHBweratauCg4M1b9483ep/i8zKylKrVq0k/fL5\nZf78+bdcN1AZsrKy1KRJE7366qvF7ouJiVGTJk10+fLlW/psNXv2bDVp0kQrVqwo0n716lW1atVK\ngwYNuq3ab5SUlKRu3bqpa9eu6tKli6ZMmSKLxXLLy7u+3ampqUpISKi0Oo3MpaoLMJopU6YoMzNT\nH330ke6//34VFhZq3bp16tWrl5YvX6777ruv2GOSkpJuutw///nP9ij3plxcXDR69GitW7dO3t7e\nt7SMRx55RGvXrpUkrVq1Sp9++qk++uijyiyzTMuWLdO2bdtKfO7t6ciRIzp//rwk6dFHH9WsWbPu\n6PpR9SwWiwYNGqSFCxeqefPmkqS1a9dqwIABSk1NlbOzc7EvkhzZ+fPnNXr0aK1atUoPPPCAJGnu\n3LkaNmyYkpOTb2vZderUue1lAJXh448/LnK8W7BggRISErRs2bI7VsOZM2d07NixEu/7+OOPlZWV\npdWrV8vFxUXZ2dnq3bu3atWqpV69et3WesPDw2/r8UBlcXd31/Hjx3X69Gnb8ebq1avKyMiw9bnV\nz1Z169bVunXr1KNHD1vb5s2bdc8999x+4f+/f/7zn9qyZYuWLVumatWqKS8vT0OHDtWcOXP01ltv\n3dayn332WT377LOVVKmxEXQr0blz55ScnKxt27apRo0akiQnJyeFhITowIED+uijj2xnF319ffXt\nt9/qrbfe0nvvvacPP/xQjz76qObPn68VK1bIw8NDAQEBSk1N1WeffaYxY8aoUaNG6tevnx599FEN\nHDhQu3bt0oULF/Taa6/pT3/6k65evarx48fr+PHjunLlijw8PPT++++rYcOGt7xNDz30kHx9fTV2\n7FjNmzevxG0eP368Tp8+LavVqpCQEPXv379C65g9e7b27t2rCxcuqEmTJhozZozi4uJ06dIlXbx4\nUQ888IA++OAD1a5dWx06dFD37t21e/dunT17Vp06ddKoUaOUm5urmJgYnThxQk5OTmrevLkmTpyo\nP/7xj7JarRowYIDi4+NVo0YNTZw4UT/88INMJpP69u2rkJAQpaen65133tE999yjq1evKjo6WnPm\nzNHvf/97HT58WNWrV1dUVJQWLVqkY8eO6YUXXtDYsWNVWFiod999V/v27VNubq6sVqsSEhJUt25d\nzZo1S9nZ2YqJiVFISIgmTZqkf/zjH8rOztaECROUmZkpk8mkoKAgvfXWW3JxcSn1tcXd6aefflJ2\ndrauXr1qa+vatavMZrMKCgoUGxsrSerdu7fmz59v+5LMYrHo8uXLCgkJ0bBhw5Senq6ZM2eqXr16\nOnz4sCwWi+Li4tS2bVudP39eY8aM0YULF1S3bl1dunTJtq4VK1Zo2bJlys/P15UrVzRgwABFRERo\n1apVWrFihX766SeZzWYtXLhQCQkJSktLU+3atVW7dm15enoW257vv/9e+fn5Rband+/e+sMf/mC7\n/dFHH9k+gNevX1+TJ0+Ws7PzTfdNWVlZCg4O1n/+8x/Nnj1bp0+f1sWLF3X69Gl5e3tr5syZqlOn\njvbv36/x48crPz9fPj4+OnPmjMaMGaPHH3+8Ul87QJJ+/vlnnT171nZMz8/P1+TJk7V79245OzvL\n19dXMTExMpvNkqQlS5YoMzNTFotFffr0UY8ePZSenm7b/0sqcvvo0aN6++23ZbFYZLVa1aNHD4WF\nhSk2Nlbnz59Xv379tGDBgiI1Xbx4Ufn5+bJYLHJxcZGnp6emTp2qwsJC2/3x8fH673//KycnJ4WF\nhem1117T3r17NW3aNFksFl28eFFPPvmk3n333SLLnj17tr7//nvFxcWVeryVVOpnFaCyODs7q1On\nTlq/fr1ef/11Sb+E0WeffVYLFy6UVHQsjRkzRmazWd9++63OnTunhg0basaMGfLw8Ci27KCgIG3Z\nskXnzp2znQRZvXq1unbtqv/+97+SpGPHjmnixIm6evWqLly4oKZNm+qDDz5QVlaWevXqpcWLF6tp\n06YaNWqUnJ2d9d577xVZx8WLF1VQUKBr166pWrVqcnd317hx42wzuHJzc5WQkKCvvvpKzs7Oeu65\n5zR8+HAdP368xPW6u7vbln3jSaPIyEj5+fnpq6++0tmzZ+Xv768pU6bIyclJq1at0vz581WtWjW1\nbdtWf//733Xo0KHKf7EcGFOXK9G+ffvUsGFD2wHxRk8++WSRb6EaNWqkf/7zn3r++edtbZ9//rnt\nA+iqVauUm5tb4nosFotq1aql5ORkzZo1S9OnT1deXp527NghLy8vpaSk6NNPP1WLFi30ySef3PZ2\nxcbG6tixY1q8eHGx+0aOHKnHH39c69ev19KlS7Vu3Tpt2LChwus4ffq0Vq9erffff18bNmyQn5+f\nli1bptTUVFWrVs12Rlj65Ru9JUuWKDk5WYsXL9apU6f0r3/9S7m5uVq7dq1tOsqpU6e0ZMkSSb98\nA+7n56fBgwcrMjJS69evV1JSkmbMmKH//Oc/kqTDhw9r+vTpWrdundzc3PT1119r8ODB2rRpk2rX\nrq358+fro48+0qpVq7RkyRKdP39e+/bt04ULF7Rs2TJt3LhR3bt3V1JSku6//34NHTpUAQEBxXZ+\nCQkJqlmzptavX6+VK1fq22+/te20S3ttcXeqUaOGoqOj1b9/fz377LOKjo7WypUr9eSTT8rNzc32\n3vj444913333aeHChZo8ebJWrVqlZcuWaf78+baD4v79+9W3b1+tWbNGPXr00Jw5cyT98lOCli1b\nasOGDbaxKv1yEF2+fLnmz5+vNWvWaObMmZo2bZqttiNHjmjRokVatGiRlixZouPHj2vDhg1auHCh\nzp49W+L2NG3aVKGhoerevbs6d+6s2NhYbd26VYGBgZKk1NRUW+3/+Mc/9OCDD2rx4sW3tG/68ssv\n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\nTUd97qmr/ByxJslx66osHDcrF3VVjKPW5QjuprHpKHVI1FIao9Ril6ArSWfPntWQIUMUERGh4OBg\n/fjjj/Ly8pIkPf/885o0aZICAgKUm5tre0xubq48PT1lNptt7bm5ufLy8irSdmO7q6tricsoD39/\n/7I7LMm6eZ87LCMjw+Fqkqiroqq6LkfagZXEnmOzqp/70lBX+TliTVLl1HVXj80lWTfvUwWM/H6x\nB+oqff2O7G4Zm1X9Ot6IWkp2t9VS1ti0y1WX//e//6lv376Kjo5Wjx49JEn9+vXT/v37JUm7d+9W\n8+bN5evrq4yMDOXl5Sk7O1tHjx5V48aN1bp1a23fvl2StGPHDvn7+8tsNsvV1VUnT56U1WrVzp07\nFRAQoNatW2vnzp0qLCzUmTNnVFhYyLRlAAAAAPgNs8sZ3Xnz5unHH39UYmKiEhMTJUljxozRu+++\nK1dXV917772aNGmSzGazIiMjFRERIavVquHDh8vd3V3h4eEaPXq0wsPD5erqqunTp0uSJkyYoJEj\nR6qgoECBgYFq2bKlJCkgIEC9evVSYWGh4uLi7LFJAAAAAIC7hF2CbmxsrGJjY4u1JycnF2sLDQ1V\naGhokbbq1atr1qxZxfr6+fkpJSWlWHtUVJSioqJuo2IAAAAAgFHYZeoyAAAAAABVhaALAAAAADAU\ngi4AAAAAwFAIugAAAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQyHoAgAAAAAM\nhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAA\nQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAA\nwFAIugAAAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQyHoAgAAAAAMhaALAAAA\nADAUgi4AAAAAwFAIugAAAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQyHoAgAA\nAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAA\nAAAAQyHoAgAAAAAMhaALAAAAADAUgi4AAAAAwFAIugAAAAAAQ3Gxx0Lz8/M1duxYnT59WhaLRYMH\nD9YjjzyiMWPGyGQyqVGjRoqPj5eTk5NSUlKUnJwsFxcXDR48WO3bt9e1a9cUHR2tS5cuycPDQ1Om\nTJG3t7exGrJwAAAgAElEQVT27t2rd955R87OzgoMDNSbb74pSZozZ462bdsmFxcXjR07Vr6+vvbY\nLAAAAADAXcAuQXfdunWqWbOmpk2bph9++EEhISFq2rSphg0bpscff1xxcXFKTU2Vn5+fFi1apJUr\nVyovL08RERFq166dli5dqsaNGysqKkobNmxQYmKiYmNjFR8fr9mzZ6tevXoaOHCgDh06JKvVqj17\n9mj58uU6e/asoqKitHLlSntsFgAAAADgLmCXoPviiy+qY8eOkiSr1SpnZ2cdPHhQbdq0kSQ99dRT\n2rVrl5ycnNSqVSu5ubnJzc1NPj4+yszMVEZGhvr372/rm5iYqJycHFksFvn4+EiSAgMDlZaWJjc3\nNwUGBspkMqlu3boqKCjQ5cuX5e3tbY9NAwAAAAA4OLsEXQ8PD0lSTk6Ohg4dqmHDhmnKlCkymUy2\n+7Ozs5WTkyNPT88ij8vJySnSfmNfs9lcpO+pU6fk7u6umjVrFmnPzs4uV9DNyMiolD53miPWJFFX\nRTlqXY7A3mPTUZ976io/R6xJcty6KgvHzcpFXRXjqHU5grtpbDpKHRK1lMYotdgl6ErS2bNnNWTI\nEEVERCg4OFjTpk2z3ZebmysvLy+ZzWbl5uYWaff09CzSXlZfLy8vubq6lriM8vD39y+7w5Ksm/e5\nwzIyMhyuJom6Kqqq63KkHVhJ7Dk2q/q5Lw11lZ8j1iRVTl139dhcknXzPlXAyO8Xe6Cu0tfvyO6W\nsVnVr+ONqKVkd1stZY1Nu1x1+X//+5/69u2r6Oho9ejRQ5LUrFkzpaenS5J27NihgIAA+fr6KiMj\nQ3l5ecrOztbRo0fVuHFjtW7dWtu3b7f19ff3l9lslqurq06ePCmr1aqdO3cqICBArVu31s6dO1VY\nWKgzZ86osLCQacsAAAAA8BtmlzO68+bN048//qjExEQlJiZKkt5++20lJCRoxowZatiwoTp27Chn\nZ2dFRkYqIiJCVqtVw4cPl7u7u8LDwzV69GiFh4fL1dVV06dPlyRNmDBBI0eOVEFBgQIDA9WyZUtJ\nUkBAgHr16qXCwkLFxcXZY5MAAAAAAHcJuwTd2NhYxcbGFmtfvHhxsbbQ0FCFhoYWaatevbpmzZpV\nrK+fn59SUlKKtUdFRSkqKuo2KgYAAAAAGIVdpi4DAAAAAFBVCLoAAAAAAEMh6AIAAAAADIWgCwAA\nAAAwFIIuAAAAAMBQCLoAAAAAAEMh6AIAAAAADIWgCwAAAAAwFIIuAAAAAMBQCLoAAAAAAEMh6AIA\nAAAADIWgCwAAAAAwFIIuAAAAAMBQCLoAAAAAAEMh6AIAAAAADIWgCwAAAAAwFIIuAAAAAMBQCLoA\nAAAAAEMh6AIAAAAADIWgCwAAAAAwFIIuAAAAAMBQCLoAAAAAAEMh6AIAAAAADIWgCwAAAAAwFIIu\nAAAAAMBQCLoAAAAAAEMh6AIAAAAADIWgCwAAAAAwFIIuAAAAAMBQCLoAAAAAAEMh6AIAAAAADKVc\nQXfAgAH65z//qfz8fHvXAwAAAADAbSlX0B04cKA+//xzdezYURMmTND+/fvtXRcAAAAAALfEpTyd\nHnvsMT322GO6du2aNm3apKFDh8psNqtHjx6KiIiQm5ubvesEAAAAAKBcyhV0JSk9PV1r167Vrl27\n9NRTT6lz587atWuXBg8erAULFtizRgAAAAAAyq1cQbd9+/Z68MEH9corryguLk7VqlWTJLVp00Y9\nevSwa4EAAAAAAFREuYLuxx9/LA8PD9WuXVvXrl3TiRMnVL9+fTk7O2v16tX2rhEAAAAAgHIr18Wo\ntm3bpv79+0uSLl26pNdff13Lli2za2EAAAAAANyKcgXdlJQUffLJJ5KkBx54QKtWrdLixYvtWhgA\nAAAAALeiXEE3Pz+/yJWVXV1d7VYQAAAAAAC3o1y/0X3uuefUu3dvderUSZK0efNmdejQwa6FAQAA\nAABwK8oVdKOjo7Vp0yZ98cUXcnFx0WuvvabnnnvO3rUBAAAAAFBh5f4/ug8//LDuvfdeWa1WSdIX\nX3yhxx57zG6FAQAAAABwK8oVdCdMmKCtW7eqXr16tjaTyaS///3vdisMAAAAAIBbUa6gu2vXLm3a\ntEnVqlWzdz0AAAAAANyWcl11uV69erYpywAAAAAAOLJyndGtUaOGXnrpJbVq1arIvxl677337FYY\nAAAAAAC3olxBNygoSEFBQfauBQAAAACA21auqcvdu3fXY489plq1aik4OFgBAQHq3r37TR+3b98+\nRUZGSpIOHTqkoKAgRUZGKjIyUhs3bpQkpaSk6OWXX1ZoaKi2bt0qSbp27ZqioqIUERGhAQMG6PLl\ny5KkvXv3qmfPngoLC9OcOXNs65kzZ4569OihsLAw7d+/v2LPAAAAAADAUMp1Rnfjxo2aO3eurl27\npuTkZIWFhWnUqFHq1q1bqY9JSkrSunXrVL16dUnSwYMH1adPH/Xt29fW5+LFi1q0aJFWrlypvLw8\nRUREqF27dlq6dKkaN26sqKgobdiwQYmJiYqNjVV8fLxmz56tevXqaeDAgTp06JCsVqv27Nmj5cuX\n6+zZs4qKitLKlStv82kBAAAAANytyhV0k5KStHTpUv3xj39U7dq1tXr1avXp06fMoOvj46PZs2dr\n1KhRkqQDBw7o2LFjSk1NVf369TV27Fjt37/f9rtfNzc3+fj4KDMzUxkZGerfv78k6amnnlJiYqJy\ncnJksVjk4+MjSQoMDFRaWprc3NwUGBgok8mkunXrqqCgQJcvX5a3t/dNtysjI6NS+txpjliTRF0V\n5ah1OQJ7j01Hfe6pq/wcsSbJceuqLBw3Kxd1VYyj1uUI7qax6Sh1SNRSGqPUUq6g6+TkJLPZbLv9\n+9//Xk5OZc967tixo7Kysmy3fX191bNnT7Vo0UJz587VX/7yFzVt2lSenp62Ph4eHsrJyVFOTo6t\n3cPDQ9nZ2crJySlSg4eHh06dOiV3d3fVrFmzSHt2dna5gq6/v3/ZHZZk3bzPHZaRkeFwNUnUVVFV\nXZcj7cBKYs+xWdXPfWmoq/wcsSapcuq6q8fmkqyb96kCRn6/2AN1lb5+R3a3jM2qfh1vRC0lu9tq\nKWtslus3uo0aNdLixYv1888/65tvvtG4cePUtGnTChX6/PPPq0WLFra/Dx06JLPZrNzcXFuf3Nxc\neXp6FmnPzc2Vl5dXiX1La78xPAMAAAAAflvKFXTj4uJ0/vx5ubu7a+zYsTKbzYqPj6/Qivr162e7\nUNTu3bvVvHlz+fr6KiMjQ3l5ecrOztbRo0fVuHFjtW7dWtu3b5ck7dixQ/7+/jKbzXJ1ddXJkydl\ntVq1c+dOBQQEqHXr1tq5c6cKCwt15swZFRYWlutsLgAAAADAmMo1dfmee+7RiBEjNGLEiFte0fjx\n4zVp0iS5urrq3nvv1aRJk2Q2mxUZGamIiAhZrVYNHz5c7u7uCg8P1+jRoxUeHi5XV1dNnz5dkjRh\nwgSNHDlSBQUFCgwMVMuWLSVJAQEB6tWrlwoLCxUXF3fLNQIAAAAA7n7lCrpNmzaVyWQq0va73/1O\n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\nSUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2664e160588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import scale, robust_scale, minmax_scale\n",
    "\n",
    "funding = X_tf[\"confidence_validation_funding_raised_value_total_number\"]\n",
    "\n",
    "figure = plt.figure()\n",
    "\n",
    "ax0 = plt.subplot(151)\n",
    "funding.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Original - No Transformation\") \n",
    "print(\"Median: {}, IQR: {}\".format(funding.median(), stats.iqr(funding)))\n",
    "\n",
    "figure.add_subplot(152, sharey=ax0)\n",
    "funding_std = pd.Series(scale(funding), index=X_pos.index)\n",
    "funding_std.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Standard Scaling\") \n",
    "print(\"Median: {}, IQR: {}\".format(funding_std.median(), stats.iqr(funding_std)))\n",
    "\n",
    "\n",
    "figure.add_subplot(153, sharey=ax0)\n",
    "funding_robust = pd.Series(robust_scale(funding), index=X_pos.index)\n",
    "funding_robust.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Robust Scaling\") \n",
    "print(\"Median: {}, IQR: {}\".format(funding_robust.median(), stats.iqr(funding_robust)))\n",
    "\n",
    "\n",
    "figure.add_subplot(154, sharey=ax0)\n",
    "funding_mm = pd.Series(minmax_scale(funding), index=X_pos.index)\n",
    "funding_mm.plot(kind=\"hist\", bins=100)\n",
    "plt.title(\"Min Max Scaling\") \n",
    "print(\"Median: {}, IQR: {}\".format(funding_mm.median(), stats.iqr(funding_mm)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--> Apply scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import scale\n",
    "\n",
    "X_std = scale(X_tf)\n",
    "X_std = pd.DataFrame(X_std, index=X_tf.index, columns=list(X_tf))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2.3 Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PCA Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAABAEkERAAAAAH0ERQAAAAAkERQBW/nlL3+ZOXPmJEkeffTRnHPOOTn33HNz2WWXpVKpJEluvPHG\nvPe978373//+/PjHPx7NcmGv193dnQsvvDDnnntuZs+enSVLlpib0ADK5XIuvvjinH322TnnnHNy\n//33m5vQIJ5//vmcdtppefDBB81LeBlaRrsAoHF8/etfz2233ZaxY8cmSa666qrMnTs3J510UubP\nn58lS5bkhBNOyMKFC3PzzTdn8+bNOffcc3PKKaekra1tlKuHvdNtt92WiRMn5tprr83q1avz7ne/\nO8ccc4y5CaOs/18sv/3tb2f58uX53Oc+l2q1am7CKOvu7s78+fPT3t6exJ9n4eXQUQQMOPzww7Ng\nwYKB9ytWrMiMGTOSJDNnzsyyZcvyq1/9Kq9//evT1taW/fbbL4cffnjuvffe0SoZ9npvf/vb8/GP\nfzxJUq1WUyqVzE1oAG9961vzmc98Jkny5JNPZvz48eYmNIBrrrkmZ599dg466KAk/jwLL4egCBgw\na9astLQMNhpWq9UUCoUkSUdHR9auXZt169Zlv/32Gzino6Mj69atq3utsK/o6OhIZ2dn1q1bl499\n7GOZO3euuQkNoqWlJfPmzctnPvOZvOMd7zA3YZTdcsstmTRpUk499dSBY+Yl7D5BEbBDxeLgPyLW\nr1+f8ePHp7OzM+vXrx92fOj/0QJ73lNPPZXzzjsv73rXu/KOd7zD3IQGcs011+QHP/hBLr300mze\nvHnguLkJ9XfzzTdn2bJlmTNnTu65557MmzcvL7zwwsDn5iWMjKAI2KFjjz02y5cvT5IsXbo0J554\nYo4//vh0dXVl8+bNWbt2bR588MFMnTp1lCuFvddzzz2XD37wg7nwwgsze/bsJOYmNIJbb701X/3q\nV5MkY8eOTaFQyHHHHWduwij61re+lUWLFmXhwoV5zWtek2uuuSYzZ840L2E3FarVanW0iwAax8qV\nK/OJT3wiN954Yx5++OFceuml6e7uzpQpU3LFFVekVCrlxhtvzA033JBqtZoPf/jDmTVr1miXDXut\nK664It/73vcyZcqUgWOf+tSncsUVV5ibMIo2bNiQiy++OM8991x6enpy/vnn56ijjvL/m9Ag5syZ\nk8svvzzFYtG8hN0kKAIAAAAgiaVnAAAAAPQRFAEAAACQRFAEAAAAQB9BEQAAAABJBEUAAAAA9BEU\nAQANYd26dfn0pz+ds846K+9617syZ86crFixYrTL+p2sXbs2H/3oR7f72bRp03LjjTcOOzZnzpws\nX778d77vnhoHANj3CIoAgFFXqVRy/vnnZ8KECbn11lvzz//8z7ngggty/vnn58UXXxzt8l62NWvW\n5N57793h55/73Ofy1FNP1bEiAICdaxntAgAAli9fnmeeeSYf+9jHUiz2/nesk08+OVdddVUqlUqS\n5Ctf+Upuu+22lEqlnHLKKbnwwgvz1FNP5YILLsjkyZNz//3357jjjsuMGTOyePHirFmzJl/60pdy\n1FFH5YwzzsgZZ5yRO++8M0ly5ZVX5thjj83DDz+c+fPnZ/Xq1Rk3blw+9alP5fjjj89FF12Uzs7O\nrFixIk8//XQuuOCCvO9978v69evzt3/7t3nggQdSLpdz/vnn56yzzsott9ySO+64I2vWrMnjjz+e\nU045JZdffnmuuOKKPPPMM7ngggvypS99aZvvfd555+WSSy7JN77xjWHHV65cmfPOOy+33357kmTB\nggVJkr/8y7/MKaecktNPPz133nlnDjzwwJx77rlZuHBhVq1alauvvjozZsxIktx44425+uqrU61W\nc/HFF+ekk07aaf2LFy/O6tWrc/rpp+cTn/hEbf6HBgAano4iAGDU/eY3v8nrXve6gZCo32mnnZYD\nDjggP/nJT3L77bcPBBqPPvpovv3tbydJ7rvvvnz0ox/N97///fz617/OE088kRtuuCFnnXVWbrjh\nhoGxJk6cmFtvvTUf+9jHMm/evCTJhRdemDlz5uQ73/lOLr744nz84x/Pli1bkiSrVq3K9ddfny9/\n+cv5u7/7uyTJl7/85bz2ta/NLbfckm9961v5yle+kscffzxJctddd+ULX/hCbrvttvz4xz/Offfd\nl0suuSQHHXTQdkOiJAMdU1svQduZ5557Lm9+85vz/e9/P0nyox/9KNdff33+8i//Mt/85jcHzhs3\nblwWL16cq6++Op/85CezZcuWndb/9NNPZ/HixUIiANjH6SgCAEZdsVhMtVrd4ec///nP84d/+Idp\nb29Pkrzvfe/LrbfemtNOOy2veMUrcuyxxyZJDj744LzxjW9Mkhx66KFZuXLlwBjvf//7kyRnnHFG\nLrrooqxatSqPPfZY3va2tyVJTjjhhEyYMCEPPfRQkuSUU05JoVDI1KlTs3r16iTJsmXLsmnTptx8\n881Jkg0bNuSBBx5Ikrz+9a9PZ2dnkmTy5MlZs2ZNOjo6dvq9W1pacvXVV+dP//RPc+qpp4749zVz\n5swkyate9apMnz594Pu+9NJLA+fMnj07SXLMMcdk0qRJeeihh3Za/7HHHpuWFn80BIB9nT8NAACj\n7rjjjsv111+farWaQqEwcPy6667Lm970poHlZ0P19PQkSdra2oYdL5VK273H0BCkUqmkXC5vE05V\nq9WUy+UkyZgxY5JkWD2VSiXXXnttXvva1ybp7e6ZMGFCvvOd7wyc33/NzoKvoaZOnTqwBG1H1/f0\n9Ayrf+h33tH3HXq8Wq2mpaVlp/X3h3AAwL7N0jMAYNSdeOKJOeCAA/LFL35xIKi54447csstt+TV\nr351Tj755Hz3u9/Npk2b0tPTk5tvvjknn3zybt3ju9/9bpLkhz/8YY466qi86lWvyuTJk/Ov//qv\nSZK77747zz33XI4++ugdjnHyySfnn/7pn5IkzzzzTN75znfudDPqlpaWgUBrZ/qXoN11111JkvHj\nx2fNmjV54YUXsmXLltxxxx0j/p79vvOd7yRJfv3rX2fdunU54ogjdrt+AGDfo6MIABh1hUIhf//3\nf5+rrroqZ511VlpaWrL//vvna1/7Wl7xilfk9NNPzz333JP3ve996enpyamnnpo/+ZM/yapVq0Z8\nj3//93/PTTfdlLFjx+bqq69Oklx77bW5/PLLs2DBgrS2tmbBggXbdCgN9Rd/8Re5/PLLc9ZZZ6Vc\nLufCCy/M4YcfPrBJ9tYOOOCAHHrooZkzZ04WLly4w3H7l6C9973vTZLst99++dCHPpTZs2fn4IMP\nzute97oRf89+GzZsyLvf/e4Ui8V89rOfTWtr627XDwDsewrVkfZFAwA0qTPOOCP/+I//mMMOO2y0\nSwEAaGiWngEAAACQREcRAAAAAH10FAEAAACQRFAEAAAAQB9BEQAAAABJBEUAAAAA9BEUAQAAAJBE\nUAQAAABAn/8focqTOwpTt80AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x26657cc65f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Principal Components Analysis (PCA)\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "def screeplot(pca, X):\n",
    "    y = pca.explained_variance_\n",
    "    x = np.arange(len(y)) + 1\n",
    "    plt.plot(x, y)\n",
    "    plt.ylabel(\"Eigenvalue\")\n",
    "    plt.xlabel(\"Component Number\")\n",
    "    plt.xlim(1,None)\n",
    "    return y\n",
    "\n",
    "pca = PCA().fit(X_std)\n",
    "eigenvalues = screeplot(pca,X_std)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda3\\lib\\site-packages\\numpy\\lib\\function_base.py:2558: RuntimeWarning: invalid value encountered in true_divide\n",
      "  c /= stddev[:, None]\n",
      "C:\\Anaconda3\\lib\\site-packages\\numpy\\lib\\function_base.py:2559: RuntimeWarning: invalid value encountered in true_divide\n",
      "  c /= stddev[None, :]\n",
      "C:\\Anaconda3\\lib\\site-packages\\scipy\\stats\\_distn_infrastructure.py:875: RuntimeWarning: invalid value encountered in greater\n",
      "  return (self.a < x) & (x < self.b)\n",
      "C:\\Anaconda3\\lib\\site-packages\\scipy\\stats\\_distn_infrastructure.py:875: RuntimeWarning: invalid value encountered in less\n",
      "  return (self.a < x) & (x < self.b)\n",
      "C:\\Anaconda3\\lib\\site-packages\\scipy\\stats\\_distn_infrastructure.py:1814: RuntimeWarning: invalid value encountered in less_equal\n",
      "  cond2 = cond0 & (x <= self.a)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nZHJycsjMzCQ3N9e0HOrXr0///v0ZO3YsL730Es2aNTMtNkCvXr2Ii4sjPj6e2bNn079/f1PjAwQF\nBTFkyBD69+/PypUrqVatmkfFL+Lv788nn3yCw+Fg3759zr8J4qYM+dMee+wx43//+5/x4IMPGsnJ\nyUZkZKTpOSxYsMD0mJcaPHiwYRiGMXr0aMMwDOPBBx80PYd///vfzp/tdrvp8b/66ivjgQceMG6/\n/Xajb9++xv79+4233nrL2Lx5s2k5fPrpp0Z2drZhGIaRnp5uWtwiS5YsMT3mr9ntduO7774zDMMw\nDh8+bPpn4ejRo5bGL/LTTz8ZI0aMMLp162Y89dRTxokTJyzJQ8yhMe2rUNQNZbPZLOuG+uyzz0yP\neSlfX1927dpFQUEBn3zyCZmZmabn8Pbbbzt/tqJV0bJlS9auXct///tfkpKSaNGiBX//+9+57777\nTMthwYIFBAYGAlCzZk3T4hb5+OOPKSwsND3upTIzM1m0aBGDBw9m3759ps9tmDBhAo0bNwagadOm\nlrVw/f396du3L++//z5/+ctfTJsMKdZQ9/hVKA/dUPn5+fTq1YtGjRrh5XXxO9ecOXNMix8XF8ex\nY8cYNmwY//znPxk2bJhpsYtY/R6sX7+exYsXY7fbnfeZPSHPZrPx5JNPFnsPnn32WdPiF03KDA0N\nxWazYbPZTJ+IFRMTwyOPPMIrr7xCmzZteOGFF4p9oStrFStWJD4+vtj/AyuGCZ599lkGDRoEQOXK\nlXn++ed59dVXTc9DzKGifRWmTJnCzJkzyczMZNmyZcTGxpqew6hRo0yPeSm73c7p06e57bbbaNCg\ngSWXllj9Hrz22mssXLiQOnXqWJZDnz59LIsN5WNSptUTsG655RYATp8+bWrcXzt//jwdO3YEoEeP\nHiQlJVmaj5QtdY9fhdq1azNv3jzef/995s+fz3XXXWda7MLCQvLz81m+fDm33HILrVq1omXLlrz0\n0kum5QAwevRoQkNDAbjrrrsYP368qfEBbrjhBnbu3Mm6des4e/YsISEhpsa/7rrraNCgAX5+fs6b\n2Xr06EFubi779+8nKyuL7t27mxrf29ubmTNnMnToUOLj4y+7ft8MVvd8DR8+nIiICGrWrEnnzp15\n7LHHTI1fxNfXl507d5Kdnc2nn37qbPWLe1JL+0+44447ALhw4QLnz5+nTp06pKWlUa1aNbZv325K\n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\nhwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x26648c1e940>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "from itertools import combinations\n",
    "\n",
    "features = list(X_std)\n",
    "f_map = {x: '_'.join(x.split(\"_\")[:3]) for x in features}\n",
    "f_group = defaultdict(list)\n",
    "for f,g in f_map.items():\n",
    "    f_group[g].append(f)\n",
    "agg_group = {}\n",
    "for g,l in f_group.items():\n",
    "    combo = combinations(l, 2)\n",
    "    for x,y in combo:\n",
    "        corr = stats.spearmanr(X_std[x][:100], X_std[y][:100])[0]\n",
    "        if corr < 0: X_std[y] *= -1\n",
    "    tot = X_std[l].sum(axis=1)\n",
    "    agg_group[g] = tot\n",
    "X_grp = pd.DataFrame(agg_group)\n",
    "grp_corr = X_grp.corr(method=\"spearman\")\n",
    "mask = np.zeros_like(grp_corr)\n",
    "mask[np.triu_indices_from(mask)] = True\n",
    "f_names = [x.split(\"_\")[2] for x in list(X_grp)]\n",
    "ax = sns.heatmap(grp_corr,square=True, mask=mask, xticklabels=f_names, yticklabels=f_names)\n",
    "ax.invert_yaxis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABJUAAAFyCAYAAABMTetDAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xt4lPWd///Xfc9kcpokBEI4J0DIBAEREgSpiJwU2XpE\nCMJV2qtav63bdle3a7W9rHbXbg+7a69+ddfu1rZX94c/5aSs1NZWCCdBpToRUGgOBAgEjAkQIQnk\nNHN//8iZhDCBTO6ZyfNxXblyz2fuuec1ibetr+t93zEsy7IEAAAAAAAA9IJpdwAAAAAAAACEH0ol\nAAAAAAAA9BqlEgAAAAAAAHqNUgkAAAAAAAC9RqkEAAAAAACAXqNUAgAAAAAAQK857Q7Ql7xer90R\nAAAAAAAAIk5OTk6XtYgqlaTuPyTCm9fr5fcKhAnOVyB8cL4C4YPzFQgvkXjOXm6Ih8vfAAAAAAAA\n0GuUSgAAAAAAAOg1SiUAAAAAAAD0GqUSAAAAAAAAeo1SCQAAAAAAAL1GqQQAAAAAAIBeo1QCAAAA\nAABAr1EqAQAAAAAAoNcolQAAAAAAANBrlEoAAAAAAADoNUolAAAAAAAA9BqlEgAAAAAAAHqNUgkA\nAAAAAAC9FnGlUvGJKrsjAAAAAAAARLyIK5XWby2yOwIAAAAAAEDEi7hS6f1PynX01Dm7YwAAAAAA\nAES0iCuVJGlDXrHdEQAAAAAAACJaxJVK40claff+kyqrqLY7CgAAAAAAQMSKuFJpxSKPLItpJQAA\nAAAAgGCKuFLppikjNGZYgnbkl6n8TK3dcQAAAAAAACJSxJVKpmkod5FHfr+ljduYVgIAAAAAAAiG\niCuVJOmWaaM0MiVeeR8cV2XVRbvjAAAAAAAARJyILJUcpqHlCzPV5LP0+g6mlQAAAAAAAPpaRJZK\nkjQvZ4xSk2P19vulqjpfZ3ccAAAAAACAiBKxpZLTYWrZgkw1NPm1aWeJ3XEAAAAAAAAiijMYB21s\nbNT3v/99nTx5Ug0NDXrkkUc0YcIEPfnkkzIMQ5mZmXrmmWdkmqbWr1+vtWvXyul06pFHHtH8+fNV\nV1enxx9/XGfOnFF8fLx+9rOfafDgwb3OsfDGNK3dUqS33j2q++dPUJI7OgifFgAAAAAAYOAJyqTS\n5s2bNWjQIL3yyiv69a9/rWeffVY/+clP9Oijj+qVV16RZVnKy8tTZWWl1qxZo7Vr1+o3v/mNfv7z\nn6uhoUGvvvqqPB6PXnnlFd1777168cUXryqHK8qhpfMnqK7Bp9+/c6SPPyUAAAAAAMDAFZRS6Y47\n7tDf//3fS5Isy5LD4dDBgwc1c+ZMSdLcuXP17rvv6sCBA5o+fbpcLpcSEhKUlpamgoICeb1e3XLL\nLW37vvfee1edZfFN6Upyu/T73UdUc7Hx2j8cAAAAAAAAgnP5W3x8vCSppqZGf/d3f6dHH31UP/vZ\nz2QYRtvz1dXVqqmpUUJCQqfX1dTUdFpv3TdQXq+3y9qNE2K0dd95/Wr9bt06JfFaPhps0t3vFUBo\n4nwFwgfnKxA+OF+B8DJQztmglEqS9Omnn+qb3/ymVq1apbvuukv/9m//1vZcbW2tEhMT5Xa7VVtb\n22k9ISGh03rrvoHKycnpsnbd5Ea9X7hFHx6+qEceuEWx0UH72AgCr9fb7e8VQOjhfAXCB+crED44\nX4HwEonn7OVKsqBc/nb69Gk9+OCDevzxx7Vs2TJJ0qRJk7R3715J0q5duzRjxgxNnTpVXq9X9fX1\nqq6uVklJiTwej7Kzs7Vz5862fa/1lxEXE6W752ao+kKj3nr36LV9OAAAAAAAAASnVPqv//ovnT9/\nXi+++KJWr16t1atX69FHH9ULL7ygFStWqLGxUYsXL9bQoUO1evVqrVq1Sl/5ylf02GOPKTo6WitX\nrlRxcbFWrlypdevW6Vvf+tY1Z7przjjFRju1aUeJ6ht9ffApAQAAAAAABq6gXAf21FNP6amnnuqy\n/vLLL3dZy83NVW5ubqe12NhYPf/8832ayR3n0p1zxmlDXrHefr9Ud90yvk+PDwAAAAAAMJAEZVIp\nVN0zN0PRLode216sxiamlQAAAAAAAK7WgCqVktzRWjJ7rM6cq1PeByfsjgMAAAAAABC2BlSpJEn3\nzZugKKepDduK1eTz2x0HAAAAAAAgLA24UmlwYoxun5WuirMXtDO/zO44AAAAAAAAYWnAlUqStHT+\nBDkdhjbkFcnnt+yOAwAAAAAAEHYGZKmUmhynBTPSdLKyVu/uP2V3HAAAAAAAgLAzIEslSVq2IFOm\nIa3bWig/00oAAAAAAAC9MmBLpREp8ZqbPVql5dXae7Dc7jgAAAAAAABhZcCWSpKUu9Ajo2VaybKY\nVgIAAAAAAAjUgC6VxgxL0BemjlRJ2Tl5CyrsjgMAAAAAABA2BnSpJEkrFnkkSeu2MK0EAAAAAAAQ\nqAFfKo0bmaRZk4eroLRKBw6ftjsOAAAAAABAWBjwpZIk5bZMK63fWmRzEgAAAAAAgPBAqSTJk5as\n6Z6hOnD4tA4dPWN3HAAAAAAAgJBHqdRixW1ZkqR1TCsBAAAAAABcEaVSi8njh2hKxhDlF1So+ESV\n3XEAAAAAAABCGqVSBw8sap5W4t5KAAAAAAAAPaNU6mBqZoqy0pP1/iflOnrqnN1xAAAAAAAAQhal\nUgeGYWhFy1+C25BXbHMaAAAAAACA0EWpdIkZ1w3T+FFJ2r3/pMoqqu2OAwAAAAAAEJIolS7ROq1k\nWUwrAQAAAAAAXA6lUjdumjJCacMTtCO/TOVnau2OAwAAAAAAEHIolbphmoZyF3rk91vauI1pJQAA\nAAAAgEtRKl3GnGmjNDIlXnkfHFdl1UW74wAAAAAAAIQUSqXLcJiGli/MVJPP0us7mFYCAAAAAADo\niFKpB/Nyxig1OVZvv1+qqvN1dscBAAAAAAAIGZRKPXA6TC1bkKmGJr827SyxOw4AAAAAAEDIoFS6\ngoU3pmlwYozeeveoztXU2x0HAAAAAAAgJFAqXYEryqH7509QXYNPv3/niN1xAAAAAAAAQgKlUgBu\nvyldSW6Xfr/7iGouNtodBwAAAAAAwHaUSgGIcTl1760TdKGuSX/YzbQSAAAAAAAApVKA/uYLY+WO\njdIbu0p0sb7J7jgAAAAAAAC2olQKUFxMlO6em6HqC416692jdscBAAAAAACwFaVSL9w1Z5xio53a\ntKNE9Y0+u+MAAAAAAADYhlKpF9xxLt05Z5w+r6nXn98/ZnccAAAAAAAA21Aq9dI9czMU7XLo9e2H\n1djEtBIAAAAAABiYKJV6KckdrSWzx+rMuTrlfXDC7jgAAAAAAAC2oFS6CvfNm6Aop6kN24rV5PPb\nHQcAAAAAAKDfUSpdhcGJMbp9Vroqzl7Qzvwyu+MAAAAAAAD0O0qlq7R0/gQ5HYY25BXJ57fsjgMA\nAAAAANCvKJWuUmpynBbMSNPJylrt2X/S7jgAAAAAAAD9ilLpGixbkCnTNLR+a5H8TCsBAAAAAIAB\nhFLpGoxIidet00eptLxaew+W2x0HAAAAAACg31AqXaPlCz0yDGnd1kJZFtNKAAAAAABgYKBUukZj\nhiXoC1NHqqTsnLwFFXbHAQAAAAAA6BeUSn1gxSKPJGndFqaVAAAAAADAwECp1AfGjUzSrMnDVVBa\npQOHT9sdBwAAAAAAIOgolfpIbsu00vqtRTYnAQAAAAAACD5KpT7iSUtWdlaqDhw+rUNHz9gdBwAA\nAAAAIKgolfpQ67TSOqaVAAAAAABAhKNU6kOTxw/RlIwhyi+oUPGJKrvjAAAAAAAABA2lUh97YFGW\nJO6tBAAAAAAAIhulUh+bmpmirPRkvf9JuY6eOmd3HAAAAAAAgKCgVOpjhmFoRcu9lTbkFducBgAA\nAAAAIDgolYJgxnXDNH5UknbvP6myimq74wAAAAAAAPQ5SqUgaJ1WsiymlQAAAAAAQGSiVAqSm6aM\nUNrwBO3IL1P5mVq74wAAAAAAAPQpSqUgMU1DuQs98vstbdzGtBIAAAAAAIgslEpBNGfaKI1MiVfe\nB8dVWXXR7jgAAAAAAAB9hlIpiBymoeULPWryWXp9B9NKAAAAAAAgclAqBdm8nNFKTY7V2++Xqup8\nnd1xAAAAAAAA+gSlUpA5HaaWLchUQ5Nfm3aW2B0HAAAAAACgT1Aq9YNFM9M0ODFGb717VOdq6u2O\nAwAAAAAAcM2CWirt379fq1evliQdOnRIt9xyi1avXq3Vq1frj3/8oyRp/fr1Wrp0qXJzc7V9+3ZJ\nUl1dnb797W9r1apVevjhh3X27Nlgxgy6KKdD98+foLoGnza/c8TuOAAAAAAAANfMGawDv/TSS9q8\nebNiY2MlSQcPHtRXv/pVPfjgg237VFZWas2aNXrttddUX1+vVatW6eabb9arr74qj8ejb3/72/rD\nH/6gF198UU899VSwovaL229K14a8Yr25+4jumzdB7tgouyMBAAAAAABctaCVSmlpaXrhhRf03e9+\nV5L0ySef6OjRo8rLy1N6erq+//3v68CBA5o+fbpcLpdcLpfS0tJUUFAgr9err33ta5KkuXPn6sUX\nXwz4fb1eb1A+T1+YMSFGW/ed06/W79atUxLtjhNWQvn3CqAzzlcgfHC+AuGD8xUILwPlnA1aqbR4\n8WKVlZW1PZ46daqWL1+uKVOm6Je//KX+8z//UxMnTlRCQkLbPvHx8aqpqVFNTU3benx8vKqrqwN+\n35ycnL77EH3susmNer9wiz48fFHfWDFHcTFMKwXC6/WG9O8VQDvOVyB8cL4C4YPzFQgvkXjOXq4k\n67cbdd92222aMmVK2/ahQ4fkdrtVW1vbtk9tba0SEhI6rdfW1ioxMTKmeuJionT33AxVX2jUn947\nZnccAAAAAACAq9ZvpdJDDz2kAwcOSJLee+89TZ48WVOnTpXX61V9fb2qq6tVUlIij8ej7Oxs7dy5\nU5K0a9euiGr47rplvOJinNq0o0T1jT674wAAAAAAAFyVoF3+dqkf/vCHevbZZxUVFaWUlBQ9++yz\ncrvdWr16tVatWiXLsvTYY48pOjpaK1eu1BNPPKGVK1cqKipKzz33XH/FDDp3bJS+ePM4bcgr1p/f\nP6a7b8mwOxIAAAAAAECvBbVUGj16tNavXy9Jmjx5stauXdtln9zcXOXm5nZai42N1fPPPx/MaLa6\nZ26GNr9zRK9vP6wls8cqyumwOxIAAAAAAECv9Nvlb2iX5I7WktljdeZcnfI+OGF3HAAAAAAAgF6j\nVLLJffMmKMppasO2YjX5/HbHAQAAAAAA6BVKJZsMTozR7bPSVXH2gnbml9kdBwAAAAAAoFcolWy0\ndP4EOR2GNuQVyee37I4DAAAAAAAQMEolG6Umx2nBjDSdrKzVnv0n7Y4DAAAAAAAQMEolmy1bkCnT\nNLR+a5H8TCsBAAAAAIAwQalksxEp8bp1+iiVlldr78Fyu+MAAAAAAAAEhFIpBCxf6JFhSOu2Fsqy\nmFYCAAAAAAChj1IpBIwZlqAvTB2pkrJz8hZU2B0HAAAAAADgiiiVQsSKRR5J0rotTCsBAAAAAIDQ\nR6kUIsaNTNKsycNVUFqlA4dP2x0HAAAAAACgR5RKISS3ZVpp/dYim5MAAAAAAAD0jFIphHjSkpWd\nlaoDh0/r0NEzdscBAAAAAAC4LEqlENM6rbSOaSUAAAAAABDCKJVCzOTxQ3R9RoryCypUfKLK7jgA\nAAAAAADdolQKQe1/CY5pJQAAAAAAEJoolULQ1MwUZaUna+/Bch09dc7uOAAAAAAAAF1QKoUgwzD0\nwG1ZkqQNecU2pwEAAAAAAOiKUilE5UxM1fhRSdq9/6ROfFZtdxwAAAAAAIBOKJVClGEYWrHII8uS\nNm5jWgkAAAAAAIQWSqUQdtOUEUobnqAd+WUqP1NrdxwAAAAAAIA2lEohzDQN5S70yO+3mFYCAAAA\nAAAhhVIpxM2ZNkojU+KV98FxVVZdtDsOAAAAAACAJEqlkOcwDS1f6FGTz9LrO5hWAgAAAAAAoYFS\nKQzMyxmt1ORYvf1+qarO19kdBwAAAAAAgFIpHDgdppYtyFRDk1+bdpbYHQcAAAAAAIBSKVwsmpmm\nwYkxeuvdozpXU293HAAAAAAAMMBRKoWJKKdD98+foLoGnza/c8TuOAAAAAAAYICjVAojt9+UrkHu\naL25+4hqLjbaHQcAAAAAAAxglEphJMbl1L23ZuhCXZP+sJtpJQAAAAAAYB9KpTCz5AtjlRAXpTd2\nlehCHdNKAAAAAADAHpRKYSYuJkp3z81Q9YVG/em9Y3bHAQAAAAAAAxSlUhi6c854xcU4tWlHieob\nfXbHAQAAAAAAA1BApdLJkyf11a9+VbfffrsqKir05S9/WWVlZcHOhstwx0bpizeP0+c19frz+8fs\njgMAAAAAAAaggEqlp59+Wg899JDi4+M1dOhQ3XnnnXriiSeCnQ09uGduhqJdDr2+/bAam5hWAgAA\nAAAA/SugUqmqqkpz5syRZVkyDEO5ubmqqakJdjb0IMkdrSWzx+rMuTrlfXDC7jgAAAAAAGCACahU\niomJUXl5uQzDkCR9+OGHcrlcQQ2GK7tv3gRFOU1t2FasJp/f7jgAAAAAAGAAcQay05NPPqmvf/3r\nOn78uO655x6dO3dOv/jFL4KdDVcwODFGi2el6809R7Uzv0wLb0yzOxIAAAAAABggAiqVpk6dqo0b\nN+rYsWPy+XwaP348k0oh4r75E/Sn949pQ16R5uWMkcM07I4EAAAAAAAGgIBKpe9973vdrv/kJz/p\n0zDovdTkOC2Ykaa395Zqz/6Tmjt9tN2RAAAAAADAABDQPZVmzpzZ9pWdna2qqiolJycHOxsCtHxh\npkzT0PqtRfL7LbvjAAAAAACAASCgSaX77ruv0+Nly5Zp5cqVQQmE3hs+JF63Th+l7d4y7T34qWZf\nP9LuSAAAAAAAIMIFNKl0qZKSElVUVPR1FlyD5Qs9Mgxp3dYiWRbTSgAAAAAAILgCmlSaOHGiDMNo\nKysGDx6sf/iHfwhqMPTOmGEJunnqSO3ef0reggrNuG6Y3ZEAAAAAAEAEC6hUKigoCHYO9IHcRR7t\n3n9K67YUKmdiqgyDvwQHAAAAAACCo8dS6T/+4z96fPG3vvWtPg2DazNuZJJmTR6uvQfLdeDwad2Q\nOdTuSAAAAAAAIEJd1T2VELpyF3kkSeu3FtmcBAAAAAAARLIeJ5UuN4lkWZbKysqCEgjXxpOWrOys\nVOUXVujQ0TOaNG6I3ZEAAAAAAEAECmhS6eWXX1Z2drauu+46XXfddZo0aZIefPDBYGfDVWqdVlrH\ntBIAAAAAAAiSgEql3/72t3rjjTf0N3/zN9qyZYv+5V/+RVOnTg12NlylyeOH6PqMFOUXVKj4RJXd\ncQAAAAAAQAQKqFQaMmSIxowZo6ysLBUVFWnp0qU6evRosLPhGqxonVbawrQSAAAAAADoewGVSrGx\nsXr//feVlZWl7du3q7KyUufPnw92NlyDqZkpykpP1t6D5Tp66pzdcQAAAAAAQIQJqFT6wQ9+oG3b\ntumWW27R559/riVLluhLX/pSsLPhGhiGoQduy5IkbcgrtjkNAAAAAACIND3+9bdWpaWlevzxx2Wa\npl544YVgZ0IfyZmYqozRSdq9/6RW3p6lMcMS7I4EAAAAAAAiRECTSps3b9bChQv19NNP68MPPwx2\nJvQRwzC0YpFHliVt3Ma0EgAAAAAA6DsBlUrPP/+8/vjHPyo7O1svvfSS7rjjDv3iF78Idjb0gVmT\nRyhteIJ25Jep/Eyt3XEAAAAAAECECKhUkiS3262cnBxNnz5dLpdL+/btC2Yu9BHTNJS70CO/32Ja\nCQAAAAAA9JmASqXf/va3uv/++/W3f/u3cjgc+tWvfqXf/e53QY6GvjJn2iiNTIlX3gfHVVl10e44\nAAAAAAAgAgR0o+6Kigr96Ec/0nXXXRfsPAgCh2lo+UKP/u+6j/T6jmJ9/b6pdkcCAAAAAABhLqBS\n6Tvf+Y727NmjwsLCTuv33ntvUEKh783LGa1XtxTq7fdLlbvQo+TEGLsjAQAAAACAMBZQqfSP//iP\nOnXqlDIyMmQYRts6pVL4cDpMLVuQqRc37temnSV68K7JdkcCAAAAAABhLKBSqbCwUG+99VanQgnh\nZ9GNY7T27UK99e5R3T9/gpLc0XZHAgAAAAAAYSqgG3VnZGSosrKy1wffv3+/Vq9eLUkqLS3VypUr\ntWrVKj3zzDPy+/2SpPXr12vp0qXKzc3V9u3bJUl1dXX69re/rVWrVunhhx/W2bNne/3e6CrK6dD9\n8yeorsGnze8csTsOAAAAAAAIYwGVSnV1dbrjjjv0wAMP6Mtf/nLbV09eeuklPfXUU6qvr5ck/eQn\nP9Gjjz6qV155RZZlKS8vT5WVlVqzZo3Wrl2r3/zmN/r5z3+uhoYGvfrqq/J4PHrllVd077336sUX\nX7z2TwpJ0u03pWuQO1pv7j6imouNdscBAAAAAABhKqDL377+9a/3+sBpaWl64YUX9N3vfleSdPDg\nQc2cOVOSNHfuXO3Zs0emaWr69OlyuVxyuVxKS0tTQUGBvF6vvva1r7XtS6nUd2JcTt17a4Z+94dD\nenP3ET1wW5bdkQAAAAAAQBgKqFSaOXOmvF6vioqKdP/992v//v268cYbe3zN4sWLVVZW1vbYsqy2\nezLFx8erurpaNTU1SkhIaNsnPj5eNTU1ndZb9w2U1+sNeN+BakScX7EuU69vK1JawnlFRwU0sGYr\nfq9A+OB8BcIH5ysQPjhfgfAyUM7ZgEql//mf/9HWrVtVUVGhO+64Q08//bSWLVumhx56KOA3Ms32\n4qK2tlaJiYlyu92qra3ttJ6QkNBpvXXfQOXk5AS870B2vLpQ//+fClR+cZCW3pRpd5weeb1efq9A\nmOB8BcIH5ysQPjhfgfASiefs5UqygEZUNm3apN/85jeKjY1VcnKyNm7cqNdee61XASZNmqS9e/dK\nknbt2qUZM2Zo6tSp8nq9qq+vV3V1tUpKSuTxeJSdna2dO3e27Rtpv4xQcOec8YqLcWrTjhLVNTTZ\nHQcAAAAAAISZgEol0zTlcrnaHkdHR8vhcPTqjZ544gm98MILWrFihRobG7V48WINHTpUq1ev1qpV\nq/SVr3xFjz32mKKjo7Vy5UoVFxdr5cqVWrdunb71rW/17lPhityxUfrizeP0eU293t5banccAAAA\nAAAQZgK+p9LPfvYzXbx4UVu3btW6det00003XfF1o0eP1vr16yVJ48aN08svv9xln9zcXOXm5nZa\ni42N1fPPPx9INFyDe+ZmaPM7R/T69sNaMnusopy9KwoBAAAAAMDAFdCk0ne/+12lp6crKytL//u/\n/6tbb71VTzzxRLCzIciS3NFaMnuszpyr09YPTtgdBwAAAAAAhJGAJpXKy8s1d+5czZ07V5JkGIbO\nnz+vwYMHBzUcgu++eRP0hz1HtXFbsW6bmSanI/T/EhwAAAAAALBfQKXSN7/5TRUVFSkrK0uWZam4\nuFhDhw6Vw+HQs88+q9mzZwc7J4JkcGKMFs9K15t7jmpnfpkW3phmdyQAAAAAABAGAhpLGTZsmNat\nW6fXX39dmzZt0muvvaYpU6ZozZo1eu6554KdEUG2dH6mnA5DG/KK5PNbdscBAAAAAABhIKBS6eTJ\nk5oyZUrb46ysLB0/flwjRoyQz+cLWjj0j6HJsVp4Y5pOVtZqz/6TdscBAAAAAABhIKBSacyYMfr3\nf/93FRcXq7CwUM8995zS09P10UcfyTS5B08kWLYgU6ZpaP3WIvmZVgIAAAAAAFcQUCP0r//6r2pq\natJ3vvMdPfnkk/L7/frxj3+sEydO6J/+6Z+CnRH9YPiQeN06fZRKy6u19+CndscBAAAAAAAhLqAb\ndbvdbj355JNd1u++++4+DwT7LF/o0Y78Mq3bWqSbpoyQYRh2RwIAAAAAACGqx1Lpvvvu06ZNmzRx\n4sROBYNlWTIMQ3/961+DHhD9Z8ywBN08daR27z8lb0GFZlw3zO5IAAAAAAAgRPVYKi1btkySVFBQ\noKKiInk8nrbnfvSjHwU3GWyRu8ij3ftPad2WQuVMTGVaCQAAAAAAdKvHeypt3LixbfuJJ57o9JzX\n6w1OIthq3MgkzZo8XAWlVTpw+LTdcQAAAAAAQIjqsVSyLKvb7e4eI3LkLmqeSFu/tcjmJAAAAAAA\nIFQF9NffJHW5DIrLoiKXJy1Z2VmpOnD4tA4dPWN3HAAAAAAAEIJ6LJUojgauFbc1TyutY1oJAAAA\nAAB0o8cbdRcXF2vhwoWSpM8++6xt27IsVVZWBj8dbDNp3BBdn5Gi/IIKFZ+oUuaYZLsjAQAAAACA\nENJjqfTnP/+5v3IgBK1Y5NHHJae1bkuRnnpwlt1xAAAAAABACOmxVBo1alR/5UAImpqZoonpydp7\nsFxHT53TuJFJdkcCAAAAAAAhIuAbdWPgMQxDK27LkiRtyCu2OQ0AAAAAAAgllEroUc7EVGWMTtLu\n/Sd14rNqu+MAAAAAAIAQQamEHhmGoRWLPLIsaeM2ppUAAAAAAEAzSiVc0azJI5Q2PEE78stUfqbW\n7jgAAAAAACAEUCrhikzTUO5Cj/x+i2klAAAAAAAgiVIJAZozbZRGpsQr74Pjqqy6aHccAAAAAABg\nM0olBMRhGlq+0KMmn6XXtzOtBAAAAADAQEephIDNyxmt1MFx+vPeUlWdr7M7DgAAAAAAsBGlEgLm\ndJhatiBTjU1+bdpZYnccAAAAAABgI0ol9MqiG8doSFKM3nr3qM7V1NsdBwAAAAAA2IRSCb0S5XRo\n6fwJqmvwafM7R+yOAwAAAAAAbEKphF67fVa6Brmj9ebuI6q52Gh3HAAAAAAAYANKJfRajMupe2/N\n0IW6Jr25m2klAAAAAAAGIkolXJUlXxirhLgobd5Vogt1TCsBAAAAADDQUCrhqsTFROnuuRmqvtCo\nP713zO44AAAAAACgn1Eq4ardOWe84mKc2rSjRHUNTXbHAQAAAAAA/YhSCVfNHRulO+eM1+c19Xp7\nb6ndcQDcxMtQAAAgAElEQVQAAAAAQD+iVMI1ufuW8Yp2OfT69sNqbPLZHQcAAAAAAPQTSiVckyR3\ntJbMHqsz5+q09YMTdscBAAAAAAD9hFIJ12zpvAmKcprauK1YTT6/3XEAAAAAAEA/oFTCNUtOjNHi\nWemqOHtBO/PL7I4DAAAAAAD6AaUS+sTS+ZlyOgxtyCuSz2/ZHQcAAAAAAAQZpRL6xNDkWC28MU0n\nK2u1Z/9Ju+MAAAAAAIAgo1RCn1m2IFOmaWj91iL5mVYCAAAAACCiUSqhzwwfEq9bp49SaXm19h78\n1O44AAAAAAAgiCiV0KeWL/TIMKR1W4tkWUwrAQAAAAAQqSiV0KfGDEvQzVNHqqTsnLwFFXbHAQAA\nAAAAQUKphD6Xu8gjSVq3pZBpJQAAAAAAIhSlEvrcuJFJmjV5uApKq3Tg8Gm74wAAAAAAgCCgVEJQ\nrLitdVqpyOYkAAAAAAAgGCiVEBSZY5KVPTFVH5ec1sEjZ+yOAwAAAAAA+hilEoJmRcu9ldbnMa0E\nAAAAAECkoVRC0EwaN0TXZ6Qov6BCRcer7I4DAAAAAAD6EKUSgqr13krrtzKtBAAAAABAJKFUQlBN\nnZCiienJ2nuwXEdPnbM7DgAAAAAA6COUSggqwzC04rYsSUwrAQAAAAAQSSiVEHQ5E1OVMTpJew6c\n0onPqu2OAwAAAAAA+gClEoLOMAytWOSRZUkbtxXbHQcAAAAAAPQBSiX0i1mTRyh9eIJ25Jep/Eyt\n3XEAAAAAAMA1olRCvzBNQ7mLPPL7LaaVAAAAAACIAJRK6Dc33zBKI1PilffBcVVWXbQ7DgAAAAAA\nuAaUSug3DtPQ8oUeNfksvb6daSUAAAAAAMIZpRL61byc0UodHKc/7y1V1fk6u+MAAAAAAICrRKmE\nfuV0mFq2IFONTX5t2llidxwAAAAAAHCVKJXQ7xbdOEZDkmL01rtHda6m3u44AAAAAADgKlAqod9F\nOR1aOn+C6hp82vzOEbvjAAAAAACAq+Ds7ze877775Ha7JUmjR4/WN77xDT355JMyDEOZmZl65pln\nZJqm1q9fr7Vr18rpdOqRRx7R/Pnz+zsqguj2WenasLVYb+4+ovvmTZA7NsruSAAAAAAAoBf6tVSq\nr6+XZVlas2ZN29o3vvENPfroo5o1a5aefvpp5eXladq0aVqzZo1ee+011dfXa9WqVbr55pvlcrn6\nMy6CKMbl1L23Zuh3fzikN3cf0QO3ZdkdCQAAAAAA9EK/Xv5WUFCgixcv6sEHH9SXv/xl7du3TwcP\nHtTMmTMlSXPnztW7776rAwcOaPr06XK5XEpISFBaWpoKCgr6Myr6wZIvjFVCXJQ27yrRhbpGu+MA\nAAAAAIBe6NdJpZiYGD300ENavny5jh07pocffliWZckwDElSfHy8qqurVVNTo4SEhLbXxcfHq6am\nJqD38Hq9QcmO4JiREavtH5/Xrzfs0c2TEi67H79XIHxwvgLhg/MVCB+cr0B4GSjnbL+WSuPGjVN6\neroMw9C4ceM0aNAgHTx4sO352tpaJSYmyu12q7a2ttN6x5KpJzk5OX2eG8GTNalRe4vf1geH6/R/\nVsxRjKvrP5Jer5ffKxAmOF+B8MH5CoQPzlcgvETiOXu5kqxfL3/buHGjfvrTn0qSPvvsM9XU1Ojm\nm2/W3r17JUm7du3SjBkzNHXqVHm9XtXX16u6ulolJSXyeDz9GRX9xB0bpTvnjNfnNfV6e2+p3XEA\nAAAAAECA+nVSadmyZfre976nlStXyjAM/fjHP1ZycrJ+8IMf6Oc//7nGjx+vxYsXy+FwaPXq1Vq1\napUsy9Jjjz2m6Ojo/oyKfnT3LeO1eVeJXt9+WEtmj1WU02F3JAAAAAAAcAX9Wiq5XC4999xzXdZf\nfvnlLmu5ubnKzc3tj1iwWZI7Wku+ME6bdhzW1g9OaMnssXZHAgAAAAAAV9Cvl78Bl3PfrRmKcpra\nuK1YTT6/3XEAAAAAAMAVUCohJCQnxmjxrHRVnL2gHd4yu+MAAAAAAIAroFRCyFg6P1NOh6ENeUXy\n+S274wAAAAAAgB5QKiFkDE2O1cIb03TqdK327D9pdxwAAAAAANADSiWElGULMmWahtZtLZKfaSUA\nAAAAAEIWpRJCyvAh8ZqXPVrHy6u19+CndscBAAAAAACXQamEkLNsQaYMQ1q3tUiWxbQSAAAAAACh\niFIJIWfMsATdPHWkSsrOyVtQYXccAAAAAADQDUolhKTcRR5J0tothUwrAQAAAAAQgiiVEJLGjUzS\nrMnDVVhapYKyOoolAAAAAABCjNPuAMDlrLjNo70Hy7XunTPKO/C2sicOU/bEVN2QOVTu2Ci74wEA\nAAAAMKBRKiFkZY5J1jNfu0mvbdmv0kqf3t5bqrf3lso0DWWlJStnYqqyJ6YqY9QgmaZhd1wAAAAA\nAAYUSiWEtBnXDZNxYYimTc9WSdnn8hZUKL/gMxWWntVfj53Vy38qUGK8S9lZzQXTdE+qBiVE2x0b\nAAAAAICIR6mEsOAwDXnSkuVJS9bK27NUfaFB+4srlV9QIW9BhXbkl2lHfpkkKWN0krKzUpUzcZiy\n0pPldHDrMAAAAAAA+hqlEsJSQpxLc24YpTk3jJJlWSotr1Z+wWfyFlTo0NEzKik7pw15xYqLceqG\nzKHKmZiq6VmpSk2Oszs6AAAAAAARgVIJYc8wDI0dkaixIxK1dH6mLtY36eOS0y1TTJ/pvY8/1Xsf\nfypJGjPMreys5ht+Txk/RK4oh83pAQAAAAAIT5RKiDix0U7NnDRcMycNlySdOl3TdpncxyWn9cau\nEr2xq0SuKIeuzxii7InNl8qNTImXYXDDbwAAAAAAAkGphIg3MsWtkXPcunPOeDU0+nTo6BnlF1a2\nXS7nLajQS/pEqYPjlNNyw++pE1IUFxNld3QAAAAAAEIWpRIGFFeUQ9M8qZrmSdWDd03W6c8vKr+w\nQvkFFdpXVKG33jumt947JodpaNK41immVI0dkcgUEwAAAAAAHVAqYUBLGRSr22el6/ZZ6fL5/Co8\nXtVWMn1y5LQ+Ljmt//nDISUnRGt6VnPBNM2TqsR4l93RAQAAAACwFaUS0MLhMDVp3BBNGjdEX7rj\nOp2rqddHRc2XyX1UWKltH57Qtg9PyDAkz5hkZU9MVXZWqjLTkuUwmWICAAAAAAwslErAZSS5ozUv\ne7TmZY+W32/pyKlz+qiw+R5Mfz12VoXHq/Tq24Vyx0ZpmmeociamanpWqoYkxdodHQAAAACAoKNU\nAgJgmoYmjB6kCaMHaflCj2ovNurA4Up5CyqUX1ih3ftPaff+U5KksSMSld1yw+9J4wYryumwOT0A\nAAAAAH2PUgm4CvGxUZp9/UjNvn6kLMtSWUVN272YPi45rWOfntfrOw4rxuXQ1AlD2274PXxIvN3R\nAQAAAADoE5RKwDUyDENjhiVozLAE3TM3Q3UNTTp45IzyC5ovlfvLoXL95VC5JGlkSnzbFNP1GSmK\nieYUBAAAAACEJ/6LFuhjMS6nciYOU87EYXpY0mdnL7RMMX2m/cWVenPPUb2556icDlNTxg9pvuH3\nxFSlDUuQYXDDbwAAAABAeKBUAoJs2OA4LZk9Vktmj1Vjk18FpWeVX9B8qdy+4krtK67Ub39/UClJ\nMZqelaqcicN0g2eo3LFRdkcHAAAAAOCyKJWAfhTlNHV9Roquz0jRV744SVXn6/RRUfNlch8VVmrL\nX45ry1+OyzQNZaUlK6dliilj1CCZJlNMAAAAAIDQQakE2Cg5MUYLZqRpwYw0+fyWSso+b/6LcgWf\nqbD0rP567Kxe/lOBEuNdys5K1fSsVE3PGqrkhBi7owMAAAAABjhKJSBEOExDnrRkedKStfL2LFVf\naND+4sq2G37vyC/TjvwySVLG6CRlt1wql5WeLKfDtDk9AAAAAGCgoVQCQlRCnEtzbhilOTeMkmVZ\nKi2vVn7BZ/IWVOjQ0TMqKTunDXnFiotx6obMoW1/VS41Oc7u6AAAAACAAYBSCQgDhmFo7IhEjR2R\nqKXzM3Wxvkkfl5xumWL6TO99/Kne+/hTSdKYYW5lZw1T9sRUTRk/RK4oh83pAQAAAACRiFIJCEOx\n0U7NnDRcMycNlySdOl3TdpncxyWn9cauEr2xq0SuKIeuzxjSNsU0aqhbhsENvwEAAAAA145SCYgA\nI1PcGjnHrTvnjFdDo0+Hjp5RfmFl2+Vy3oIK6Q0pdXCccloKpqkTUhQXE2V3dAAAAABAmKJUAiKM\nK8qhaZ5UTfOk6sG7Juv05xeVX1ih/IIK7Suq0FvvHdNb7x2TwzQ0adwQTc8aqpyJwzRuZCJTTAAA\nAACAgFEqAREuZVCsbp+Vrttnpcvn86vweFVbyfTJkdP6uOS0/r8//lXJCdGanpWqnInNhVRivMvu\n6AAAAACAEEapBAwgDoepSeOGaNK4IfrSHdfpXE29Pipqvkzuo8JKbfvwhLZ9eEKGIXnGJLeVTJlp\nyXKYTDEBAAAAANpRKgEDWJI7WvOyR2te9mj5/ZaOnDqnjwqb78H012NnVXi8Smu3FModG6VpnqHK\nmZiq6VmpGpIUa3d0AAAAAIDNKJUASJJM09CE0YM0YfQgLV/oUe3FRh04XClvQYXyCyu0e/8p7d5/\nSpI0dkRi21+UmzRusKKcDpvTAwAAAAD6G6USgG7Fx0Zp9vUjNfv6kbIsS2UVNW33Yvq45LSOfXpe\nr+84rBiXQ1MnDFX2xOZL5YYPibc7OgAAAACgH1AqAbgiwzA0ZliCxgxL0D1zM1TX0KSDR84ov6D5\nUrm/HCrXXw6VS5JGpsS3TTFdn5GimGj+NQMAAAAAkYj/2gPQazEup3ImDlPOxGF6WNJnZy+0TDF9\npv3FlXpzz1G9ueeonA5TU8YPUfbE5pIpbViCDIMbfgMAAABAJKBUAnDNhg2O05LZY7Vk9lg1NvlV\nUHpW+QXNl8rtK67UvuJK/fb3B5WSFNPyF+WGaXSqWw6HIafDlNNhdtp2Ogw5TFMmf3EOAAAAAEIW\npRKAPhXlNHV9Roquz0jRV744SVXn6/RRUfNlch8VVmrLX45ry1+OB3Qs01BL4dRcNF26fWkZ5TC7\nW+/6urb9nJ1f43QYLfu1b0e1Hsts+e4027c7vFdUh/dwdMgDAAAAAJGKUglAUCUnxmjBjDQtmJEm\nn99SSdnn+qiwQlXV9Wry+dXk88vns9q2m3yWfC3fm3x++fx+NTVZavL75fP51eiz1NjkV129r9Nr\nmnx+uz9qF4YhOUxTUc7myavOxVXnsqt5v+YiyuFo3760JOtUYJlGSzHWcryO292Ua82vMeV0dijX\nLlOStT7P5YoAAAAALodSCUC/cZiGPGnJ8qQl9/mxLcuS32+pyd9cSjU2+eXzW12Kq44Fls9nqdHX\nXFY1+S01NbWUWL6ur2svuzpst7ymufDq7jUt235/834+q6Uk86u+sfPxmnx+WVaf/1iuWZfpLdNs\nKaKMbqfGGi7W6p3ifCXEuZQY71JifHTL9/Yvd5yLKS4AAAAgAlAqAYgIhmHI4TDkcEiKctgd56r4\n/N0UVy1F1OVKsstPenUosXoqvLoUbO1TYW3TYp22m/e72Ojr/Ly/udSTpKJTJ3r8nIYhuWOjuhRP\nCZeUT4nxrrZ9KKIAAACA0EOpBAAhwmEacpgOucK0FPP7Lb2390NleCbpfG1Dy1d9h+32r+oLzd/L\nz15oK6N60lxEuZQYH9Vl+qm9nGopqNzNa+7YKG72DgAAAAQRpRIAoE+YpqEYl6nhQ+I1fEh8QK+x\nLEu1dU06X1uv6ssUT53Wahv06ZnAiijTkNxx3RVPrdNRnQuqhHiX4mMoogAAAIBAUSoBAGxjGIbc\nsVFyx0ZJKYG9xu+3dKGusbloai2eai4touo7lVOnKmsUQA8l01CHy/CilRB3SfEU51Kiu3M5FR/j\n5IbmAAAAGJAolQAAYcU0Dbnjmu+zNDLA1/j9lmpbiqjqK1yad762QedqGlRWURPQzdNN01BiXPf3\nhOp6iV5zQRVHEQUAAIAIQKkEAIh4pmkoIa653NHQwF7j81uqvdjYcmleY5cSqvPlefX6vLpeZRXV\nARVRDtPoUkL19BfzEuNdio2miAIAAEBooVQCAKAbDtNoK3QC5fNbqrnQ8z2hOk5JVZ2v0/Hy6oCO\n7XQYvfqLeRRRAAAACDZKJQAA+ojDNJTkjlaSOzrg1/h8ftVcbOzmMrz6bsupM+fqVBpwEWV2Lpxa\nty/9i3kdnotxOSiiAAAAEBBKJQAAbORwmFdVRFVfaLxs8XTpZFRl1QUd+/R8QMeOcppdJp7iY6MU\nHeWQq+UrOsps225+7Gh53mx77Gp5HO1yKjrKlNNhUlYBAABEGEolAADCjMNhalBCtAYlBF5ENfn8\nncqn6m4mozoWVRW9KKICYRhqLpqc7aVUtMvRpYTqXFJdrsQyFR3l7L7EajkuJRYAAEDwUSoBADAA\nOB2mkhNilJwQE/BrGpv8qrnQoNq6RjU0+lXf4FNDo0/1Tc3fGxp9qm/0N39vfa6x9Tl/2+P2tfb9\nL9Y36VxNveobfWryBXB3817qrsRqLbK6K7E6f+9dieWKcijKSYkFAAAGHkolAADQrSinqeTEGCUn\nBl5EXQ2f3+pQOrWXUhFRYnWYyOpSSjnbLw+8tMTqruyixAIAAKGGUgkAANjKYRqKjXYqNrp//m9J\npJdY7ZcWdlNidSi5Tp2s0ZmmUpmGZBhGy1fzttn2veuacclzpmHIMFueU4fnTF3y+vbttte1fW/f\n1uWeM40O79H6vkan/K3bAACgf1AqAQCAAYUSq4O/7AveB7dR1yKsY1HWvMNlizPzknKs9TnzkjW1\nl2ndHatjcdb1fVq3uynoOhRyUoeCzTS6PW7H17XlMJuP6XA0fzdNQw6zff3Sxx336/Kc2b7e0zE7\n7tfjestrKf8AIDJQKgEAAARRqJZYRcUlGjt2nCzLkmVZ8ltq2Vanx/6Oa/6WfXTJc/7O+0uS39/8\nXKfXd9i+3HN+y5Lllyx13Kdlu8MxpdZ9Ox+r4/7WJWv+y7x358/b8t3nV5MuWfN33l9qec7f8dit\nz6EnZktR1rWoMmW2lGqdHrdutxR87c/1rvzq9PiSoutqC7VgHPPS4/n8zf9sUcYBCDWUSgAAABEk\n0BIrtqlcOTlj+inVwNNWLl2uoOtS4nUt7zqVZ22lWnelWIfizN+87fc3f/n8Vttjn9/f/Lzfks+y\n5Pf7W9bVvt16DL+//bW+1vXujtm+7rc6P/Z1WL/0sc/Xvn7p4477NTT5uh7zkiwDxtqTnabb2oo5\n02hf61DItU+tdZhmaympOk6/Odr2by/6Ok7IdSzPWifjAlrrcKwuax1e5+iQ1TAkR9ulrR3yd/qM\n7Z+142RewGs9vbdpdPpZdXrvtmO2rwEI4VLJ7/frhz/8oQoLC+VyufSjH/1I6enpdscCAAAArqj5\nP9YlyZDD7jARrrtCq6ei6tIyrK1su7R8syz5fP6WdbU/190xLi3dLrd+lSXduXPnFe92t5WLHQs5\nqzV7h2NaluRrKRobfe2FY+vEU2sJ6fO3l5WtRSUC113R1LGM6q6gunSt433o7LyctvM97dpzGJes\n6XLPme1rhoz2y4k7faZe3MPP7HopcuefU+dLkbv7mVzuUuFuc6vDfublfgbcw687IVsqbd26VQ0N\nDVq3bp327dunn/70p/rlL39pdywAAAAAIcQ0DZky5Izg9s7r9SonJyfo79P5cs8ORVx3ax0m6i4t\ntDqWXm0lV8fyyq+2Yq3tuB1e12mtw+sCWuvmWL4ecrV/xm7WWou7S9a6P1aHScHLrDU2+btMFHa+\npJjLacONeUnRJMNQbLRD989OUvDP2NAQsqWS1+vVLbfcIkmaNm2aPvnkE5sTAQAAAEDk6jhhx4hd\n6Lji/e4CvJzWsjrcr66by2kvf0+6Ds+1FGKWLtnH3zmHv/nNurmnXXd5r/4eft1l7XKfvsv8fNru\n4de61vEz+bv+TDp/pq7PtX6W6CiHYlymzf/U9J+QLZVqamrkdrvbHjscDjU1Ncnp7Dmy1+sNdjTY\ngN8rED44X4HwwfkKhA/OV4QiQwH2j0bLV0gKTriBcs6GbKnkdrtVW1vb9tjv91+xUJLUL2Oh6F/9\nNe4L4NpxvgLhg/MVCB+cr0B4icRz9nIlWcjOZGVnZ2vXrl2SpH379snj8dicCAAAAAAAAK1CdlLp\ntttu0549e/TAAw/Isiz9+Mc/tjsSAAAAAAAAWoRsqWSapv75n//Z7hgAAAAAAADoRshe/gYAAAAA\nAIDQRakEAAAAAACAXqNUAgAAAAAAQK9RKgEAAAAAAKDXKJUAAAAAAADQa5RKAAAAAAAA6DVKJQAA\nAAAAAPQapRIAAAAAAAB6jVIJAAAAAAAAvWZYlmXZHaKveL1euyMAAAAAAABEnJycnC5rEVUqAQAA\nAAAAoH9w+RsAAAAAAAB6jVIJAAAAAAAAvUapBAAAAAAAgF6jVAIAAAAAAECvUSoBAAAAAACg1yiV\nEJIaGxv1+OOPa9WqVVq2bJny8vLsjgTgCs6cOaNbb71VJSUldkcBcAX//d//rRUrVmjp0qXasGGD\n3XEAXEZjY6O+853v6IEHHtCqVav431ggRO3fv1+rV6+WJJWWlmrlypVatWqVnnnmGfn9fpvTBRel\nEkLS5s2bNWjQIL3yyiv69a9/rWeffdbuSAB60NjYqKeffloxMTF2RwFwBXv37tVHH32kV199VWvW\nrFF5ebndkQBcxs6dO9XU1KS1a9fq/7Vz7zFNnQ0cx7+FehkoMFFjVFy8jE3URaNBFFHhD52xm8sg\ny0JWtsyQbHbiJUFwYwYXI3XGS2Rio1nihrJp5KLEhF3CoixkZGYuMejURLOJcpEIVbyxtmd/GPqq\nk86+vu7Ay+/zX59zes7vgQSaX5/nOBwOtm/fbnYkEXnInj17yMvL4+7duwAUFBSwcuVKSkpKMAzj\n/36BhEol6ZFefvllVqxYAYBhGISGhpqcSEQC2bRpE2+++SbDhw83O4qI/IMff/yR2NhYHA4H7733\nHvPnzzc7koh0Y+zYsXi9Xnw+Hx0dHVitVrMjichDxowZQ2Fhof91fX098fHxAMydO5fa2lqzov0r\n9FdJeqTw8HAAOjo6yMrKYuXKlSYnEpHulJWVMWTIEJKSkti9e7fZcUTkH7S1tXHlyhVcLhcNDQ28\n//77VFVVYbFYzI4mIg8JCwvj8uXLLFq0iLa2Nlwul9mRROQhCxcupKGhwf/aMAz//9Tw8HBu3Lhh\nVrR/hVYqSY/V2NhIRkYGS5Ys4ZVXXjE7joh0o7S0lNraWux2O2fOnCEnJ4erV6+aHUtEuhEVFcWc\nOXPo378/48aNY8CAAVy7ds3sWCLyCHv37mXOnDl88803HD58mNzcXP8WGxHpmUJC/lOz3Lx5k4iI\nCBPTPH0qlaRHam1t5d133yU7O5u0tDSz44hIAPv372ffvn0UFxczceJENm3axLBhw8yOJSLdmD59\nOjU1NRiGQXNzM7dv3yYqKsrsWCLyCBEREQwePBiAyMhIPB4PXq/X5FQiEkhcXBx1dXUAHD9+nBkz\nZpic6OnS9jfpkVwuF9evX6eoqIiioiLg3gPQ9BBgERGRJ5OcnMzPP/9MWloahmGwbt06PbtQpId6\n5513+PDDD0lPT+fPP/9k1apVhIWFmR1LRALIycnh448/ZuvWrYwbN46FCxeaHempshiGYZgdQkRE\nREREREREehdtfxMRERERERERkaCpVBIRERERERERkaCpVBIRERERERERkaCpVBIRERERERERkaCp\nVBIRERERERERkaCpVBIREZFep6Ojg/Xr12Oz2ViyZAl2u536+nqzYz2RGzdusGzZskcee+GFFzh4\n8OADY3a7nbq6uie+7//qOiIiItL3qFQSERGRXsXn85GZmUlkZCQVFRUcPnwYh8NBZmYmbW1tZsf7\nr7ndbn777bduj2/bto3GxsZ/MZGIiIhIYFazA4iIiIgEo66ujpaWFrKysggJuff9WEJCAgUFBfh8\nPgBcLhdHjhwhNDSUxMREsrOzaWxsxOFwEBMTw7lz55g8eTLx8fGUl5fjdrvZuXMn48ePJyUlhZSU\nFE6cOAHAxo0biYuL4+LFi6xbt4729nbCwsL46KOPeOmll8jNzWXQoEHU19fT3NyMw+EgNTWVmzdv\n8sknn3D+/Hm8Xi+ZmZnYbDbKysqoqanB7XZz6dIlEhMTyc/PZ8OGDbS0tOBwONi5c+ff5p2RkUFe\nXh6ff/75A+MNDQ1kZGRQXV0NQGFhIQDLly8nMTGR5ORkTpw4wbBhw0hPT6e4uJimpiacTifx8fEA\nHDx4EKfTiWEYrF27lpkzZwbMX15eTnt7O8nJyaxevfrp/KJFRESkx9NKJREREelVTp8+zZQpU/yF\nUpd58+YRHR3NsWPHqK6u9pcfv//+O19//TUAZ8+eZdmyZVRVVXHq1CkuX77MgQMHsNlsHDhwwH+t\nqKgoKioqyMrKIicnB4Ds7GzsdjuVlZWsXbuWFStW0NnZCUBTUxMlJSXs2rWLTz/9FIBdu3YxadIk\nysrK2L9/Py6Xi0uXLgFw8uRJduzYwZEjR/jhhx84e/YseXl5DB8+/JGFEuBfifXwNrhAWltbmT9/\nPlVVVQB8//33lJSUsHz5cr744gv/eWFhYZSXl+N0OlmzZg2dnZ0B8zc3N1NeXq5CSUREpI/TSiUR\nERHpVUJCQjAMo9vjP/30E4sXL2bgwIEApKamUlFRwbx58xg6dChxcXEAjBgxglmzZgEwcuRIGhoa\n/Nd44403AEhJSSE3N5empib++OMPFixYAMDUqVOJjIzkwoULACQmJmKxWIiNjaW9vR2A2tpa7ty5\nQ2lpKQC3bt3i/PnzAEybNo1BgwYBEBMTg9vtJjw8POC8rVYrTqeTt99+m6SkpMf+ec2dOxeAUaNG\nMbUdjAMAAAKeSURBVH36dP98r1+/7j8nLS0NgBdffJEhQ4Zw4cKFgPnj4uKwWvUxUkREpK/TpwER\nERHpVSZPnkxJSQmGYWCxWPzjW7duZfbs2f4tcPfzeDwA9O/f/4Hx0NDQR97j/sLE5/Ph9Xr/VmQZ\nhoHX6wVgwIABAA/k8fl8bN68mUmTJgH3Vg1FRkZSWVnpP7/rPYFKsvvFxsb6t8F1936Px/NA/vvn\n3N187x83DAOr1Rowf1dhJyIiIn2btr+JiIhIrzJjxgyio6P57LPP/KVOTU0NZWVlTJgwgYSEBI4e\nPcqdO3fweDyUlpaSkJAQ1D2OHj0KwHfffcf48eMZNWoUMTExfPvttwD8+uuvtLa28vzzz3d7jYSE\nBL766isAWlpaePXVVwM+aNtqtfrLr0C6tsGdPHkSgIiICNxuN9euXaOzs5OamprHnmeXyspKAE6d\nOkVHRwfPPfdc0PlFRESk79FKJREREelVLBYLRUVFFBQUYLPZsFqtPPvss+zevZuhQ4eSnJzMmTNn\nSE1NxePxkJSUxFtvvUVTU9Nj3+OXX37h0KFDPPPMMzidTgA2b95Mfn4+hYWF9OvXj8LCwr+tfLrf\nBx98QH5+PjabDa/XS3Z2NmPGjPE/APxh0dHRjBw5ErvdTnFxcbfX7doG9/rrrwMwePBgli5dSlpa\nGiNGjGDKlCmPPc8ut27d4rXXXiMkJIQtW7bQr1+/oPOLiIhI32MxHne9tYiIiEgfkJKSwpdffsno\n0aPNjiIiIiLSo2n7m4iIiIiIiIiIBE0rlUREREREREREJGhaqSQiIiIiIiIiIkFTqSQiIiIiIiIi\nIkFTqSQiIiIiIiIiIkFTqSQiIiIiIiIiIkFTqSQiIiIiIiIiIkFTqSQiIiIiIiIiIkH7C8nL3qVv\n5EkQAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2664d0a64e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca = PCA().fit(X_grp)\n",
    "eigenvalues = screeplot(pca,X_grp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.3 Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.4 Experimentation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.4.2 Robustness"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.4.3 Predictive Power"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Table 3.5 Comparison of 2013 slice from 2016 dataset with original 2013 dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
